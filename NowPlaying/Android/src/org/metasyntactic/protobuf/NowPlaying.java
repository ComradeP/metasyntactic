// Generated by the protocol buffer compiler.  DO NOT EDIT!

package org.metasyntactic.protobuf;


public final class NowPlaying {
  private NowPlaying() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public static final class ShowtimeProto extends
      com.google.protobuf.GeneratedMessageLite {
    // Use ShowtimeProto.newBuilder() to construct.
    private ShowtimeProto() {}
    
    private static final ShowtimeProto defaultInstance = new ShowtimeProto();
    public static ShowtimeProto getDefaultInstance() {
      return defaultInstance;
    }
    
    public ShowtimeProto getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // required string Time = 1;
    public static final int TIME_FIELD_NUMBER = 1;
    private boolean hasTime;
    private java.lang.String time_ = "";
    public boolean hasTime() { return hasTime; }
    public java.lang.String getTime() { return time_; }
    
    // optional string Url = 2;
    public static final int URL_FIELD_NUMBER = 2;
    private boolean hasUrl;
    private java.lang.String url_ = "";
    public boolean hasUrl() { return hasUrl; }
    public java.lang.String getUrl() { return url_; }
    
    // repeated string Dubbed = 3;
    public static final int DUBBED_FIELD_NUMBER = 3;
    private java.util.List<java.lang.String> dubbed_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getDubbedList() {
      return dubbed_;
    }
    public int getDubbedCount() { return dubbed_.size(); }
    public java.lang.String getDubbed(int index) {
      return dubbed_.get(index);
    }
    
    // repeated string Subtitled = 4;
    public static final int SUBTITLED_FIELD_NUMBER = 4;
    private java.util.List<java.lang.String> subtitled_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getSubtitledList() {
      return subtitled_;
    }
    public int getSubtitledCount() { return subtitled_.size(); }
    public java.lang.String getSubtitled(int index) {
      return subtitled_.get(index);
    }
    
    
    public final boolean isInitialized() {
      if (!hasTime) return false;
      return true;
    }
    
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasTime()) {
        output.writeString(1, getTime());
      }
      if (hasUrl()) {
        output.writeString(2, getUrl());
      }
      for (java.lang.String element : getDubbedList()) {
        output.writeString(3, element);
      }
      for (java.lang.String element : getSubtitledList()) {
        output.writeString(4, element);
      }
    }
    
    private int memoizedSerializedSize = -1;
    
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getTime());
      }
      if (hasUrl()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getUrl());
      }
      {
        int dataSize = 0;
        for (java.lang.String element : getDubbedList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getDubbedList().size();
      }
      {
        int dataSize = 0;
        for (java.lang.String element : getSubtitledList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getSubtitledList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.metasyntactic.protobuf.NowPlaying.ShowtimeProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ShowtimeProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ShowtimeProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ShowtimeProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ShowtimeProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ShowtimeProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ShowtimeProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ShowtimeProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ShowtimeProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ShowtimeProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.metasyntactic.protobuf.NowPlaying.ShowtimeProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.metasyntactic.protobuf.NowPlaying.ShowtimeProto, Builder> {
      private static final   com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder> builders =
          new com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder>();
      
      private org.metasyntactic.protobuf.NowPlaying.ShowtimeProto result;
      
      // Construct using org.metasyntactic.protobuf.NowPlaying.ShowtimeProto.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = builders.get().poll();
        if (builder == null) {
          builder = new Builder();
        }
        builder.result = new org.metasyntactic.protobuf.NowPlaying.ShowtimeProto();
        return builder;
      }
      
      
      protected org.metasyntactic.protobuf.NowPlaying.ShowtimeProto internalGetResult() {
        return result;
      }
      
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.metasyntactic.protobuf.NowPlaying.ShowtimeProto();
        return this;
      }
      
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.metasyntactic.protobuf.NowPlaying.ShowtimeProto getDefaultInstanceForType() {
        return org.metasyntactic.protobuf.NowPlaying.ShowtimeProto.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.metasyntactic.protobuf.NowPlaying.ShowtimeProto build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.metasyntactic.protobuf.NowPlaying.ShowtimeProto buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.metasyntactic.protobuf.NowPlaying.ShowtimeProto buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.dubbed_ != java.util.Collections.EMPTY_LIST) {
          result.dubbed_ =
            java.util.Collections.unmodifiableList(result.dubbed_);
        }
        if (result.subtitled_ != java.util.Collections.EMPTY_LIST) {
          result.subtitled_ =
            java.util.Collections.unmodifiableList(result.subtitled_);
        }
        org.metasyntactic.protobuf.NowPlaying.ShowtimeProto returnMe = result;
        result = null;
        builders.get().offer(this);
        return returnMe;
      }
      
      public Builder mergeFrom(org.metasyntactic.protobuf.NowPlaying.ShowtimeProto other) {
        if (other == org.metasyntactic.protobuf.NowPlaying.ShowtimeProto.getDefaultInstance()) return this;
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasUrl()) {
          setUrl(other.getUrl());
        }
        if (!other.dubbed_.isEmpty()) {
          if (result.dubbed_.isEmpty()) {
            result.dubbed_ = new java.util.ArrayList<java.lang.String>();
          }
          result.dubbed_.addAll(other.dubbed_);
        }
        if (!other.subtitled_.isEmpty()) {
          if (result.subtitled_.isEmpty()) {
            result.subtitled_ = new java.util.ArrayList<java.lang.String>();
          }
          result.subtitled_.addAll(other.subtitled_);
        }
        return this;
      }
      
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setTime(input.readString());
              break;
            }
            case 18: {
              setUrl(input.readString());
              break;
            }
            case 26: {
              addDubbed(input.readString());
              break;
            }
            case 34: {
              addSubtitled(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required string Time = 1;
      public boolean hasTime() {
        return result.hasTime();
      }
      public java.lang.String getTime() {
        return result.getTime();
      }
      public Builder setTime(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder clearTime() {
        result.hasTime = false;
        result.time_ = getDefaultInstance().getTime();
        return this;
      }
      
      // optional string Url = 2;
      public boolean hasUrl() {
        return result.hasUrl();
      }
      public java.lang.String getUrl() {
        return result.getUrl();
      }
      public Builder setUrl(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder clearUrl() {
        result.hasUrl = false;
        result.url_ = getDefaultInstance().getUrl();
        return this;
      }
      
      // repeated string Dubbed = 3;
      public java.util.List<java.lang.String> getDubbedList() {
        return java.util.Collections.unmodifiableList(result.dubbed_);
      }
      public int getDubbedCount() {
        return result.getDubbedCount();
      }
      public java.lang.String getDubbed(int index) {
        return result.getDubbed(index);
      }
      public Builder setDubbed(int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.dubbed_.set(index, value);
        return this;
      }
      public Builder addDubbed(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.dubbed_.isEmpty()) {
          result.dubbed_ = new java.util.ArrayList<java.lang.String>();
        }
        result.dubbed_.add(value);
        return this;
      }
      public Builder addAllDubbed(
          java.lang.Iterable<? extends java.lang.String> values) {
        if (result.dubbed_.isEmpty()) {
          result.dubbed_ = new java.util.ArrayList<java.lang.String>();
        }
        super.addAll(values, result.dubbed_);
        return this;
      }
      public Builder clearDubbed() {
        result.dubbed_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated string Subtitled = 4;
      public java.util.List<java.lang.String> getSubtitledList() {
        return java.util.Collections.unmodifiableList(result.subtitled_);
      }
      public int getSubtitledCount() {
        return result.getSubtitledCount();
      }
      public java.lang.String getSubtitled(int index) {
        return result.getSubtitled(index);
      }
      public Builder setSubtitled(int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.subtitled_.set(index, value);
        return this;
      }
      public Builder addSubtitled(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.subtitled_.isEmpty()) {
          result.subtitled_ = new java.util.ArrayList<java.lang.String>();
        }
        result.subtitled_.add(value);
        return this;
      }
      public Builder addAllSubtitled(
          java.lang.Iterable<? extends java.lang.String> values) {
        if (result.subtitled_.isEmpty()) {
          result.subtitled_ = new java.util.ArrayList<java.lang.String>();
        }
        super.addAll(values, result.subtitled_);
        return this;
      }
      public Builder clearSubtitled() {
        result.subtitled_ = java.util.Collections.emptyList();
        return this;
      }
    }
    
    static {
      org.metasyntactic.protobuf.NowPlaying.internalForceInit();
    }
  }
  
  public static final class AllShowtimesProto extends
      com.google.protobuf.GeneratedMessageLite {
    // Use AllShowtimesProto.newBuilder() to construct.
    private AllShowtimesProto() {}
    
    private static final AllShowtimesProto defaultInstance = new AllShowtimesProto();
    public static AllShowtimesProto getDefaultInstance() {
      return defaultInstance;
    }
    
    public AllShowtimesProto getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // repeated .ShowtimeProto Showtimes = 1;
    public static final int SHOWTIMES_FIELD_NUMBER = 1;
    private java.util.List<org.metasyntactic.protobuf.NowPlaying.ShowtimeProto> showtimes_ =
      java.util.Collections.emptyList();
    public java.util.List<org.metasyntactic.protobuf.NowPlaying.ShowtimeProto> getShowtimesList() {
      return showtimes_;
    }
    public int getShowtimesCount() { return showtimes_.size(); }
    public org.metasyntactic.protobuf.NowPlaying.ShowtimeProto getShowtimes(int index) {
      return showtimes_.get(index);
    }
    
    // optional string Vendor = 2;
    public static final int VENDOR_FIELD_NUMBER = 2;
    private boolean hasVendor;
    private java.lang.String vendor_ = "";
    public boolean hasVendor() { return hasVendor; }
    public java.lang.String getVendor() { return vendor_; }
    
    // optional string Captioning = 3;
    public static final int CAPTIONING_FIELD_NUMBER = 3;
    private boolean hasCaptioning;
    private java.lang.String captioning_ = "";
    public boolean hasCaptioning() { return hasCaptioning; }
    public java.lang.String getCaptioning() { return captioning_; }
    
    
    public final boolean isInitialized() {
      for (org.metasyntactic.protobuf.NowPlaying.ShowtimeProto element : getShowtimesList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (org.metasyntactic.protobuf.NowPlaying.ShowtimeProto element : getShowtimesList()) {
        output.writeMessage(1, element);
      }
      if (hasVendor()) {
        output.writeString(2, getVendor());
      }
      if (hasCaptioning()) {
        output.writeString(3, getCaptioning());
      }
    }
    
    private int memoizedSerializedSize = -1;
    
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (org.metasyntactic.protobuf.NowPlaying.ShowtimeProto element : getShowtimesList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      if (hasVendor()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getVendor());
      }
      if (hasCaptioning()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getCaptioning());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto, Builder> {
      private static final   com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder> builders =
          new com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder>();
      
      private org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto result;
      
      // Construct using org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = builders.get().poll();
        if (builder == null) {
          builder = new Builder();
        }
        builder.result = new org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto();
        return builder;
      }
      
      
      protected org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto internalGetResult() {
        return result;
      }
      
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto();
        return this;
      }
      
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto getDefaultInstanceForType() {
        return org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.showtimes_ != java.util.Collections.EMPTY_LIST) {
          result.showtimes_ =
            java.util.Collections.unmodifiableList(result.showtimes_);
        }
        org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto returnMe = result;
        result = null;
        builders.get().offer(this);
        return returnMe;
      }
      
      public Builder mergeFrom(org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto other) {
        if (other == org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto.getDefaultInstance()) return this;
        if (!other.showtimes_.isEmpty()) {
          if (result.showtimes_.isEmpty()) {
            result.showtimes_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.ShowtimeProto>();
          }
          result.showtimes_.addAll(other.showtimes_);
        }
        if (other.hasVendor()) {
          setVendor(other.getVendor());
        }
        if (other.hasCaptioning()) {
          setCaptioning(other.getCaptioning());
        }
        return this;
      }
      
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              org.metasyntactic.protobuf.NowPlaying.ShowtimeProto.Builder subBuilder = org.metasyntactic.protobuf.NowPlaying.ShowtimeProto.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addShowtimes(subBuilder.buildPartial());
              break;
            }
            case 18: {
              setVendor(input.readString());
              break;
            }
            case 26: {
              setCaptioning(input.readString());
              break;
            }
          }
        }
      }
      
      
      // repeated .ShowtimeProto Showtimes = 1;
      public java.util.List<org.metasyntactic.protobuf.NowPlaying.ShowtimeProto> getShowtimesList() {
        return java.util.Collections.unmodifiableList(result.showtimes_);
      }
      public int getShowtimesCount() {
        return result.getShowtimesCount();
      }
      public org.metasyntactic.protobuf.NowPlaying.ShowtimeProto getShowtimes(int index) {
        return result.getShowtimes(index);
      }
      public Builder setShowtimes(int index, org.metasyntactic.protobuf.NowPlaying.ShowtimeProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.showtimes_.set(index, value);
        return this;
      }
      public Builder setShowtimes(int index, org.metasyntactic.protobuf.NowPlaying.ShowtimeProto.Builder builderForValue) {
        result.showtimes_.set(index, builderForValue.build());
        return this;
      }
      public Builder addShowtimes(org.metasyntactic.protobuf.NowPlaying.ShowtimeProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.showtimes_.isEmpty()) {
          result.showtimes_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.ShowtimeProto>();
        }
        result.showtimes_.add(value);
        return this;
      }
      public Builder addShowtimes(org.metasyntactic.protobuf.NowPlaying.ShowtimeProto.Builder builderForValue) {
        if (result.showtimes_.isEmpty()) {
          result.showtimes_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.ShowtimeProto>();
        }
        result.showtimes_.add(builderForValue.build());
        return this;
      }
      public Builder addAllShowtimes(
          java.lang.Iterable<? extends org.metasyntactic.protobuf.NowPlaying.ShowtimeProto> values) {
        if (result.showtimes_.isEmpty()) {
          result.showtimes_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.ShowtimeProto>();
        }
        super.addAll(values, result.showtimes_);
        return this;
      }
      public Builder clearShowtimes() {
        result.showtimes_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional string Vendor = 2;
      public boolean hasVendor() {
        return result.hasVendor();
      }
      public java.lang.String getVendor() {
        return result.getVendor();
      }
      public Builder setVendor(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasVendor = true;
        result.vendor_ = value;
        return this;
      }
      public Builder clearVendor() {
        result.hasVendor = false;
        result.vendor_ = getDefaultInstance().getVendor();
        return this;
      }
      
      // optional string Captioning = 3;
      public boolean hasCaptioning() {
        return result.hasCaptioning();
      }
      public java.lang.String getCaptioning() {
        return result.getCaptioning();
      }
      public Builder setCaptioning(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasCaptioning = true;
        result.captioning_ = value;
        return this;
      }
      public Builder clearCaptioning() {
        result.hasCaptioning = false;
        result.captioning_ = getDefaultInstance().getCaptioning();
        return this;
      }
    }
    
    static {
      org.metasyntactic.protobuf.NowPlaying.internalForceInit();
    }
  }
  
  public static final class MovieProto extends
      com.google.protobuf.GeneratedMessageLite {
    // Use MovieProto.newBuilder() to construct.
    private MovieProto() {}
    
    private static final MovieProto defaultInstance = new MovieProto();
    public static MovieProto getDefaultInstance() {
      return defaultInstance;
    }
    
    public MovieProto getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional string Identifier = 1;
    public static final int IDENTIFIER_FIELD_NUMBER = 1;
    private boolean hasIdentifier;
    private java.lang.String identifier_ = "";
    public boolean hasIdentifier() { return hasIdentifier; }
    public java.lang.String getIdentifier() { return identifier_; }
    
    // optional string Title = 2;
    public static final int TITLE_FIELD_NUMBER = 2;
    private boolean hasTitle;
    private java.lang.String title_ = "";
    public boolean hasTitle() { return hasTitle; }
    public java.lang.String getTitle() { return title_; }
    
    // optional int32 Length = 3;
    public static final int LENGTH_FIELD_NUMBER = 3;
    private boolean hasLength;
    private int length_ = 0;
    public boolean hasLength() { return hasLength; }
    public int getLength() { return length_; }
    
    // optional string Language = 4;
    public static final int LANGUAGE_FIELD_NUMBER = 4;
    private boolean hasLanguage;
    private java.lang.String language_ = "";
    public boolean hasLanguage() { return hasLanguage; }
    public java.lang.String getLanguage() { return language_; }
    
    // optional string Genre = 5;
    public static final int GENRE_FIELD_NUMBER = 5;
    private boolean hasGenre;
    private java.lang.String genre_ = "";
    public boolean hasGenre() { return hasGenre; }
    public java.lang.String getGenre() { return genre_; }
    
    // optional string Description = 6;
    public static final int DESCRIPTION_FIELD_NUMBER = 6;
    private boolean hasDescription;
    private java.lang.String description_ = "";
    public boolean hasDescription() { return hasDescription; }
    public java.lang.String getDescription() { return description_; }
    
    // optional string RawRating = 8;
    public static final int RAWRATING_FIELD_NUMBER = 8;
    private boolean hasRawRating;
    private java.lang.String rawRating_ = "";
    public boolean hasRawRating() { return hasRawRating; }
    public java.lang.String getRawRating() { return rawRating_; }
    
    // optional int32 Score = 9;
    public static final int SCORE_FIELD_NUMBER = 9;
    private boolean hasScore;
    private int score_ = 0;
    public boolean hasScore() { return hasScore; }
    public int getScore() { return score_; }
    
    // optional string IMDbUrl = 10;
    public static final int IMDBURL_FIELD_NUMBER = 10;
    private boolean hasIMDbUrl;
    private java.lang.String iMDbUrl_ = "";
    public boolean hasIMDbUrl() { return hasIMDbUrl; }
    public java.lang.String getIMDbUrl() { return iMDbUrl_; }
    
    // repeated string Director = 11;
    public static final int DIRECTOR_FIELD_NUMBER = 11;
    private java.util.List<java.lang.String> director_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getDirectorList() {
      return director_;
    }
    public int getDirectorCount() { return director_.size(); }
    public java.lang.String getDirector(int index) {
      return director_.get(index);
    }
    
    // repeated string Cast = 12;
    public static final int CAST_FIELD_NUMBER = 12;
    private java.util.List<java.lang.String> cast_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getCastList() {
      return cast_;
    }
    public int getCastCount() { return cast_.size(); }
    public java.lang.String getCast(int index) {
      return cast_.get(index);
    }
    
    // repeated string Dubbed = 13;
    public static final int DUBBED_FIELD_NUMBER = 13;
    private java.util.List<java.lang.String> dubbed_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getDubbedList() {
      return dubbed_;
    }
    public int getDubbedCount() { return dubbed_.size(); }
    public java.lang.String getDubbed(int index) {
      return dubbed_.get(index);
    }
    
    // repeated string Subtitled = 14;
    public static final int SUBTITLED_FIELD_NUMBER = 14;
    private java.util.List<java.lang.String> subtitled_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getSubtitledList() {
      return subtitled_;
    }
    public int getSubtitledCount() { return subtitled_.size(); }
    public java.lang.String getSubtitled(int index) {
      return subtitled_.get(index);
    }
    
    // optional string ReleaseDate = 15;
    public static final int RELEASEDATE_FIELD_NUMBER = 15;
    private boolean hasReleaseDate;
    private java.lang.String releaseDate_ = "";
    public boolean hasReleaseDate() { return hasReleaseDate; }
    public java.lang.String getReleaseDate() { return releaseDate_; }
    
    
    public final boolean isInitialized() {
      return true;
    }
    
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasIdentifier()) {
        output.writeString(1, getIdentifier());
      }
      if (hasTitle()) {
        output.writeString(2, getTitle());
      }
      if (hasLength()) {
        output.writeInt32(3, getLength());
      }
      if (hasLanguage()) {
        output.writeString(4, getLanguage());
      }
      if (hasGenre()) {
        output.writeString(5, getGenre());
      }
      if (hasDescription()) {
        output.writeString(6, getDescription());
      }
      if (hasRawRating()) {
        output.writeString(8, getRawRating());
      }
      if (hasScore()) {
        output.writeInt32(9, getScore());
      }
      if (hasIMDbUrl()) {
        output.writeString(10, getIMDbUrl());
      }
      for (java.lang.String element : getDirectorList()) {
        output.writeString(11, element);
      }
      for (java.lang.String element : getCastList()) {
        output.writeString(12, element);
      }
      for (java.lang.String element : getDubbedList()) {
        output.writeString(13, element);
      }
      for (java.lang.String element : getSubtitledList()) {
        output.writeString(14, element);
      }
      if (hasReleaseDate()) {
        output.writeString(15, getReleaseDate());
      }
    }
    
    private int memoizedSerializedSize = -1;
    
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasIdentifier()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getIdentifier());
      }
      if (hasTitle()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getTitle());
      }
      if (hasLength()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getLength());
      }
      if (hasLanguage()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getLanguage());
      }
      if (hasGenre()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getGenre());
      }
      if (hasDescription()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getDescription());
      }
      if (hasRawRating()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(8, getRawRating());
      }
      if (hasScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, getScore());
      }
      if (hasIMDbUrl()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(10, getIMDbUrl());
      }
      {
        int dataSize = 0;
        for (java.lang.String element : getDirectorList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getDirectorList().size();
      }
      {
        int dataSize = 0;
        for (java.lang.String element : getCastList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getCastList().size();
      }
      {
        int dataSize = 0;
        for (java.lang.String element : getDubbedList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getDubbedList().size();
      }
      {
        int dataSize = 0;
        for (java.lang.String element : getSubtitledList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getSubtitledList().size();
      }
      if (hasReleaseDate()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(15, getReleaseDate());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.metasyntactic.protobuf.NowPlaying.MovieProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.MovieProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.MovieProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.MovieProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.MovieProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.MovieProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.MovieProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.MovieProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.MovieProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.MovieProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.metasyntactic.protobuf.NowPlaying.MovieProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.metasyntactic.protobuf.NowPlaying.MovieProto, Builder> {
      private static final   com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder> builders =
          new com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder>();
      
      private org.metasyntactic.protobuf.NowPlaying.MovieProto result;
      
      // Construct using org.metasyntactic.protobuf.NowPlaying.MovieProto.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = builders.get().poll();
        if (builder == null) {
          builder = new Builder();
        }
        builder.result = new org.metasyntactic.protobuf.NowPlaying.MovieProto();
        return builder;
      }
      
      
      protected org.metasyntactic.protobuf.NowPlaying.MovieProto internalGetResult() {
        return result;
      }
      
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.metasyntactic.protobuf.NowPlaying.MovieProto();
        return this;
      }
      
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.metasyntactic.protobuf.NowPlaying.MovieProto getDefaultInstanceForType() {
        return org.metasyntactic.protobuf.NowPlaying.MovieProto.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.metasyntactic.protobuf.NowPlaying.MovieProto build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.metasyntactic.protobuf.NowPlaying.MovieProto buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.metasyntactic.protobuf.NowPlaying.MovieProto buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.director_ != java.util.Collections.EMPTY_LIST) {
          result.director_ =
            java.util.Collections.unmodifiableList(result.director_);
        }
        if (result.cast_ != java.util.Collections.EMPTY_LIST) {
          result.cast_ =
            java.util.Collections.unmodifiableList(result.cast_);
        }
        if (result.dubbed_ != java.util.Collections.EMPTY_LIST) {
          result.dubbed_ =
            java.util.Collections.unmodifiableList(result.dubbed_);
        }
        if (result.subtitled_ != java.util.Collections.EMPTY_LIST) {
          result.subtitled_ =
            java.util.Collections.unmodifiableList(result.subtitled_);
        }
        org.metasyntactic.protobuf.NowPlaying.MovieProto returnMe = result;
        result = null;
        builders.get().offer(this);
        return returnMe;
      }
      
      public Builder mergeFrom(org.metasyntactic.protobuf.NowPlaying.MovieProto other) {
        if (other == org.metasyntactic.protobuf.NowPlaying.MovieProto.getDefaultInstance()) return this;
        if (other.hasIdentifier()) {
          setIdentifier(other.getIdentifier());
        }
        if (other.hasTitle()) {
          setTitle(other.getTitle());
        }
        if (other.hasLength()) {
          setLength(other.getLength());
        }
        if (other.hasLanguage()) {
          setLanguage(other.getLanguage());
        }
        if (other.hasGenre()) {
          setGenre(other.getGenre());
        }
        if (other.hasDescription()) {
          setDescription(other.getDescription());
        }
        if (other.hasRawRating()) {
          setRawRating(other.getRawRating());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasIMDbUrl()) {
          setIMDbUrl(other.getIMDbUrl());
        }
        if (!other.director_.isEmpty()) {
          if (result.director_.isEmpty()) {
            result.director_ = new java.util.ArrayList<java.lang.String>();
          }
          result.director_.addAll(other.director_);
        }
        if (!other.cast_.isEmpty()) {
          if (result.cast_.isEmpty()) {
            result.cast_ = new java.util.ArrayList<java.lang.String>();
          }
          result.cast_.addAll(other.cast_);
        }
        if (!other.dubbed_.isEmpty()) {
          if (result.dubbed_.isEmpty()) {
            result.dubbed_ = new java.util.ArrayList<java.lang.String>();
          }
          result.dubbed_.addAll(other.dubbed_);
        }
        if (!other.subtitled_.isEmpty()) {
          if (result.subtitled_.isEmpty()) {
            result.subtitled_ = new java.util.ArrayList<java.lang.String>();
          }
          result.subtitled_.addAll(other.subtitled_);
        }
        if (other.hasReleaseDate()) {
          setReleaseDate(other.getReleaseDate());
        }
        return this;
      }
      
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setIdentifier(input.readString());
              break;
            }
            case 18: {
              setTitle(input.readString());
              break;
            }
            case 24: {
              setLength(input.readInt32());
              break;
            }
            case 34: {
              setLanguage(input.readString());
              break;
            }
            case 42: {
              setGenre(input.readString());
              break;
            }
            case 50: {
              setDescription(input.readString());
              break;
            }
            case 66: {
              setRawRating(input.readString());
              break;
            }
            case 72: {
              setScore(input.readInt32());
              break;
            }
            case 82: {
              setIMDbUrl(input.readString());
              break;
            }
            case 90: {
              addDirector(input.readString());
              break;
            }
            case 98: {
              addCast(input.readString());
              break;
            }
            case 106: {
              addDubbed(input.readString());
              break;
            }
            case 114: {
              addSubtitled(input.readString());
              break;
            }
            case 122: {
              setReleaseDate(input.readString());
              break;
            }
          }
        }
      }
      
      
      // optional string Identifier = 1;
      public boolean hasIdentifier() {
        return result.hasIdentifier();
      }
      public java.lang.String getIdentifier() {
        return result.getIdentifier();
      }
      public Builder setIdentifier(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasIdentifier = true;
        result.identifier_ = value;
        return this;
      }
      public Builder clearIdentifier() {
        result.hasIdentifier = false;
        result.identifier_ = getDefaultInstance().getIdentifier();
        return this;
      }
      
      // optional string Title = 2;
      public boolean hasTitle() {
        return result.hasTitle();
      }
      public java.lang.String getTitle() {
        return result.getTitle();
      }
      public Builder setTitle(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder clearTitle() {
        result.hasTitle = false;
        result.title_ = getDefaultInstance().getTitle();
        return this;
      }
      
      // optional int32 Length = 3;
      public boolean hasLength() {
        return result.hasLength();
      }
      public int getLength() {
        return result.getLength();
      }
      public Builder setLength(int value) {
        result.hasLength = true;
        result.length_ = value;
        return this;
      }
      public Builder clearLength() {
        result.hasLength = false;
        result.length_ = 0;
        return this;
      }
      
      // optional string Language = 4;
      public boolean hasLanguage() {
        return result.hasLanguage();
      }
      public java.lang.String getLanguage() {
        return result.getLanguage();
      }
      public Builder setLanguage(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder clearLanguage() {
        result.hasLanguage = false;
        result.language_ = getDefaultInstance().getLanguage();
        return this;
      }
      
      // optional string Genre = 5;
      public boolean hasGenre() {
        return result.hasGenre();
      }
      public java.lang.String getGenre() {
        return result.getGenre();
      }
      public Builder setGenre(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasGenre = true;
        result.genre_ = value;
        return this;
      }
      public Builder clearGenre() {
        result.hasGenre = false;
        result.genre_ = getDefaultInstance().getGenre();
        return this;
      }
      
      // optional string Description = 6;
      public boolean hasDescription() {
        return result.hasDescription();
      }
      public java.lang.String getDescription() {
        return result.getDescription();
      }
      public Builder setDescription(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder clearDescription() {
        result.hasDescription = false;
        result.description_ = getDefaultInstance().getDescription();
        return this;
      }
      
      // optional string RawRating = 8;
      public boolean hasRawRating() {
        return result.hasRawRating();
      }
      public java.lang.String getRawRating() {
        return result.getRawRating();
      }
      public Builder setRawRating(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasRawRating = true;
        result.rawRating_ = value;
        return this;
      }
      public Builder clearRawRating() {
        result.hasRawRating = false;
        result.rawRating_ = getDefaultInstance().getRawRating();
        return this;
      }
      
      // optional int32 Score = 9;
      public boolean hasScore() {
        return result.hasScore();
      }
      public int getScore() {
        return result.getScore();
      }
      public Builder setScore(int value) {
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder clearScore() {
        result.hasScore = false;
        result.score_ = 0;
        return this;
      }
      
      // optional string IMDbUrl = 10;
      public boolean hasIMDbUrl() {
        return result.hasIMDbUrl();
      }
      public java.lang.String getIMDbUrl() {
        return result.getIMDbUrl();
      }
      public Builder setIMDbUrl(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasIMDbUrl = true;
        result.iMDbUrl_ = value;
        return this;
      }
      public Builder clearIMDbUrl() {
        result.hasIMDbUrl = false;
        result.iMDbUrl_ = getDefaultInstance().getIMDbUrl();
        return this;
      }
      
      // repeated string Director = 11;
      public java.util.List<java.lang.String> getDirectorList() {
        return java.util.Collections.unmodifiableList(result.director_);
      }
      public int getDirectorCount() {
        return result.getDirectorCount();
      }
      public java.lang.String getDirector(int index) {
        return result.getDirector(index);
      }
      public Builder setDirector(int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.director_.set(index, value);
        return this;
      }
      public Builder addDirector(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.director_.isEmpty()) {
          result.director_ = new java.util.ArrayList<java.lang.String>();
        }
        result.director_.add(value);
        return this;
      }
      public Builder addAllDirector(
          java.lang.Iterable<? extends java.lang.String> values) {
        if (result.director_.isEmpty()) {
          result.director_ = new java.util.ArrayList<java.lang.String>();
        }
        super.addAll(values, result.director_);
        return this;
      }
      public Builder clearDirector() {
        result.director_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated string Cast = 12;
      public java.util.List<java.lang.String> getCastList() {
        return java.util.Collections.unmodifiableList(result.cast_);
      }
      public int getCastCount() {
        return result.getCastCount();
      }
      public java.lang.String getCast(int index) {
        return result.getCast(index);
      }
      public Builder setCast(int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.cast_.set(index, value);
        return this;
      }
      public Builder addCast(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.cast_.isEmpty()) {
          result.cast_ = new java.util.ArrayList<java.lang.String>();
        }
        result.cast_.add(value);
        return this;
      }
      public Builder addAllCast(
          java.lang.Iterable<? extends java.lang.String> values) {
        if (result.cast_.isEmpty()) {
          result.cast_ = new java.util.ArrayList<java.lang.String>();
        }
        super.addAll(values, result.cast_);
        return this;
      }
      public Builder clearCast() {
        result.cast_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated string Dubbed = 13;
      public java.util.List<java.lang.String> getDubbedList() {
        return java.util.Collections.unmodifiableList(result.dubbed_);
      }
      public int getDubbedCount() {
        return result.getDubbedCount();
      }
      public java.lang.String getDubbed(int index) {
        return result.getDubbed(index);
      }
      public Builder setDubbed(int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.dubbed_.set(index, value);
        return this;
      }
      public Builder addDubbed(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.dubbed_.isEmpty()) {
          result.dubbed_ = new java.util.ArrayList<java.lang.String>();
        }
        result.dubbed_.add(value);
        return this;
      }
      public Builder addAllDubbed(
          java.lang.Iterable<? extends java.lang.String> values) {
        if (result.dubbed_.isEmpty()) {
          result.dubbed_ = new java.util.ArrayList<java.lang.String>();
        }
        super.addAll(values, result.dubbed_);
        return this;
      }
      public Builder clearDubbed() {
        result.dubbed_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated string Subtitled = 14;
      public java.util.List<java.lang.String> getSubtitledList() {
        return java.util.Collections.unmodifiableList(result.subtitled_);
      }
      public int getSubtitledCount() {
        return result.getSubtitledCount();
      }
      public java.lang.String getSubtitled(int index) {
        return result.getSubtitled(index);
      }
      public Builder setSubtitled(int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.subtitled_.set(index, value);
        return this;
      }
      public Builder addSubtitled(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.subtitled_.isEmpty()) {
          result.subtitled_ = new java.util.ArrayList<java.lang.String>();
        }
        result.subtitled_.add(value);
        return this;
      }
      public Builder addAllSubtitled(
          java.lang.Iterable<? extends java.lang.String> values) {
        if (result.subtitled_.isEmpty()) {
          result.subtitled_ = new java.util.ArrayList<java.lang.String>();
        }
        super.addAll(values, result.subtitled_);
        return this;
      }
      public Builder clearSubtitled() {
        result.subtitled_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional string ReleaseDate = 15;
      public boolean hasReleaseDate() {
        return result.hasReleaseDate();
      }
      public java.lang.String getReleaseDate() {
        return result.getReleaseDate();
      }
      public Builder setReleaseDate(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasReleaseDate = true;
        result.releaseDate_ = value;
        return this;
      }
      public Builder clearReleaseDate() {
        result.hasReleaseDate = false;
        result.releaseDate_ = getDefaultInstance().getReleaseDate();
        return this;
      }
    }
    
    static {
      org.metasyntactic.protobuf.NowPlaying.internalForceInit();
    }
  }
  
  public static final class TheaterProto extends
      com.google.protobuf.GeneratedMessageLite {
    // Use TheaterProto.newBuilder() to construct.
    private TheaterProto() {}
    
    private static final TheaterProto defaultInstance = new TheaterProto();
    public static TheaterProto getDefaultInstance() {
      return defaultInstance;
    }
    
    public TheaterProto getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional string Identifier = 1;
    public static final int IDENTIFIER_FIELD_NUMBER = 1;
    private boolean hasIdentifier;
    private java.lang.String identifier_ = "";
    public boolean hasIdentifier() { return hasIdentifier; }
    public java.lang.String getIdentifier() { return identifier_; }
    
    // optional string Name = 2;
    public static final int NAME_FIELD_NUMBER = 2;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    // optional string StreetAddress = 3;
    public static final int STREETADDRESS_FIELD_NUMBER = 3;
    private boolean hasStreetAddress;
    private java.lang.String streetAddress_ = "";
    public boolean hasStreetAddress() { return hasStreetAddress; }
    public java.lang.String getStreetAddress() { return streetAddress_; }
    
    // optional string City = 4;
    public static final int CITY_FIELD_NUMBER = 4;
    private boolean hasCity;
    private java.lang.String city_ = "";
    public boolean hasCity() { return hasCity; }
    public java.lang.String getCity() { return city_; }
    
    // optional string State = 5;
    public static final int STATE_FIELD_NUMBER = 5;
    private boolean hasState;
    private java.lang.String state_ = "";
    public boolean hasState() { return hasState; }
    public java.lang.String getState() { return state_; }
    
    // optional string PostalCode = 6;
    public static final int POSTALCODE_FIELD_NUMBER = 6;
    private boolean hasPostalCode;
    private java.lang.String postalCode_ = "";
    public boolean hasPostalCode() { return hasPostalCode; }
    public java.lang.String getPostalCode() { return postalCode_; }
    
    // optional string Country = 7;
    public static final int COUNTRY_FIELD_NUMBER = 7;
    private boolean hasCountry;
    private java.lang.String country_ = "";
    public boolean hasCountry() { return hasCountry; }
    public java.lang.String getCountry() { return country_; }
    
    // optional string Phone = 8;
    public static final int PHONE_FIELD_NUMBER = 8;
    private boolean hasPhone;
    private java.lang.String phone_ = "";
    public boolean hasPhone() { return hasPhone; }
    public java.lang.String getPhone() { return phone_; }
    
    // optional double Latitude = 9;
    public static final int LATITUDE_FIELD_NUMBER = 9;
    private boolean hasLatitude;
    private double latitude_ = 0D;
    public boolean hasLatitude() { return hasLatitude; }
    public double getLatitude() { return latitude_; }
    
    // optional double Longitude = 10;
    public static final int LONGITUDE_FIELD_NUMBER = 10;
    private boolean hasLongitude;
    private double longitude_ = 0D;
    public boolean hasLongitude() { return hasLongitude; }
    public double getLongitude() { return longitude_; }
    
    
    public final boolean isInitialized() {
      return true;
    }
    
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasIdentifier()) {
        output.writeString(1, getIdentifier());
      }
      if (hasName()) {
        output.writeString(2, getName());
      }
      if (hasStreetAddress()) {
        output.writeString(3, getStreetAddress());
      }
      if (hasCity()) {
        output.writeString(4, getCity());
      }
      if (hasState()) {
        output.writeString(5, getState());
      }
      if (hasPostalCode()) {
        output.writeString(6, getPostalCode());
      }
      if (hasCountry()) {
        output.writeString(7, getCountry());
      }
      if (hasPhone()) {
        output.writeString(8, getPhone());
      }
      if (hasLatitude()) {
        output.writeDouble(9, getLatitude());
      }
      if (hasLongitude()) {
        output.writeDouble(10, getLongitude());
      }
    }
    
    private int memoizedSerializedSize = -1;
    
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasIdentifier()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getIdentifier());
      }
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getName());
      }
      if (hasStreetAddress()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getStreetAddress());
      }
      if (hasCity()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getCity());
      }
      if (hasState()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getState());
      }
      if (hasPostalCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getPostalCode());
      }
      if (hasCountry()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(7, getCountry());
      }
      if (hasPhone()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(8, getPhone());
      }
      if (hasLatitude()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, getLatitude());
      }
      if (hasLongitude()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, getLongitude());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.metasyntactic.protobuf.NowPlaying.TheaterProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.metasyntactic.protobuf.NowPlaying.TheaterProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.metasyntactic.protobuf.NowPlaying.TheaterProto, Builder> {
      private static final   com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder> builders =
          new com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder>();
      
      private org.metasyntactic.protobuf.NowPlaying.TheaterProto result;
      
      // Construct using org.metasyntactic.protobuf.NowPlaying.TheaterProto.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = builders.get().poll();
        if (builder == null) {
          builder = new Builder();
        }
        builder.result = new org.metasyntactic.protobuf.NowPlaying.TheaterProto();
        return builder;
      }
      
      
      protected org.metasyntactic.protobuf.NowPlaying.TheaterProto internalGetResult() {
        return result;
      }
      
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.metasyntactic.protobuf.NowPlaying.TheaterProto();
        return this;
      }
      
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.metasyntactic.protobuf.NowPlaying.TheaterProto getDefaultInstanceForType() {
        return org.metasyntactic.protobuf.NowPlaying.TheaterProto.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.metasyntactic.protobuf.NowPlaying.TheaterProto build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.metasyntactic.protobuf.NowPlaying.TheaterProto buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.metasyntactic.protobuf.NowPlaying.TheaterProto buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.metasyntactic.protobuf.NowPlaying.TheaterProto returnMe = result;
        result = null;
        builders.get().offer(this);
        return returnMe;
      }
      
      public Builder mergeFrom(org.metasyntactic.protobuf.NowPlaying.TheaterProto other) {
        if (other == org.metasyntactic.protobuf.NowPlaying.TheaterProto.getDefaultInstance()) return this;
        if (other.hasIdentifier()) {
          setIdentifier(other.getIdentifier());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasStreetAddress()) {
          setStreetAddress(other.getStreetAddress());
        }
        if (other.hasCity()) {
          setCity(other.getCity());
        }
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasPostalCode()) {
          setPostalCode(other.getPostalCode());
        }
        if (other.hasCountry()) {
          setCountry(other.getCountry());
        }
        if (other.hasPhone()) {
          setPhone(other.getPhone());
        }
        if (other.hasLatitude()) {
          setLatitude(other.getLatitude());
        }
        if (other.hasLongitude()) {
          setLongitude(other.getLongitude());
        }
        return this;
      }
      
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setIdentifier(input.readString());
              break;
            }
            case 18: {
              setName(input.readString());
              break;
            }
            case 26: {
              setStreetAddress(input.readString());
              break;
            }
            case 34: {
              setCity(input.readString());
              break;
            }
            case 42: {
              setState(input.readString());
              break;
            }
            case 50: {
              setPostalCode(input.readString());
              break;
            }
            case 58: {
              setCountry(input.readString());
              break;
            }
            case 66: {
              setPhone(input.readString());
              break;
            }
            case 73: {
              setLatitude(input.readDouble());
              break;
            }
            case 81: {
              setLongitude(input.readDouble());
              break;
            }
          }
        }
      }
      
      
      // optional string Identifier = 1;
      public boolean hasIdentifier() {
        return result.hasIdentifier();
      }
      public java.lang.String getIdentifier() {
        return result.getIdentifier();
      }
      public Builder setIdentifier(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasIdentifier = true;
        result.identifier_ = value;
        return this;
      }
      public Builder clearIdentifier() {
        result.hasIdentifier = false;
        result.identifier_ = getDefaultInstance().getIdentifier();
        return this;
      }
      
      // optional string Name = 2;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // optional string StreetAddress = 3;
      public boolean hasStreetAddress() {
        return result.hasStreetAddress();
      }
      public java.lang.String getStreetAddress() {
        return result.getStreetAddress();
      }
      public Builder setStreetAddress(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasStreetAddress = true;
        result.streetAddress_ = value;
        return this;
      }
      public Builder clearStreetAddress() {
        result.hasStreetAddress = false;
        result.streetAddress_ = getDefaultInstance().getStreetAddress();
        return this;
      }
      
      // optional string City = 4;
      public boolean hasCity() {
        return result.hasCity();
      }
      public java.lang.String getCity() {
        return result.getCity();
      }
      public Builder setCity(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasCity = true;
        result.city_ = value;
        return this;
      }
      public Builder clearCity() {
        result.hasCity = false;
        result.city_ = getDefaultInstance().getCity();
        return this;
      }
      
      // optional string State = 5;
      public boolean hasState() {
        return result.hasState();
      }
      public java.lang.String getState() {
        return result.getState();
      }
      public Builder setState(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder clearState() {
        result.hasState = false;
        result.state_ = getDefaultInstance().getState();
        return this;
      }
      
      // optional string PostalCode = 6;
      public boolean hasPostalCode() {
        return result.hasPostalCode();
      }
      public java.lang.String getPostalCode() {
        return result.getPostalCode();
      }
      public Builder setPostalCode(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasPostalCode = true;
        result.postalCode_ = value;
        return this;
      }
      public Builder clearPostalCode() {
        result.hasPostalCode = false;
        result.postalCode_ = getDefaultInstance().getPostalCode();
        return this;
      }
      
      // optional string Country = 7;
      public boolean hasCountry() {
        return result.hasCountry();
      }
      public java.lang.String getCountry() {
        return result.getCountry();
      }
      public Builder setCountry(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasCountry = true;
        result.country_ = value;
        return this;
      }
      public Builder clearCountry() {
        result.hasCountry = false;
        result.country_ = getDefaultInstance().getCountry();
        return this;
      }
      
      // optional string Phone = 8;
      public boolean hasPhone() {
        return result.hasPhone();
      }
      public java.lang.String getPhone() {
        return result.getPhone();
      }
      public Builder setPhone(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasPhone = true;
        result.phone_ = value;
        return this;
      }
      public Builder clearPhone() {
        result.hasPhone = false;
        result.phone_ = getDefaultInstance().getPhone();
        return this;
      }
      
      // optional double Latitude = 9;
      public boolean hasLatitude() {
        return result.hasLatitude();
      }
      public double getLatitude() {
        return result.getLatitude();
      }
      public Builder setLatitude(double value) {
        result.hasLatitude = true;
        result.latitude_ = value;
        return this;
      }
      public Builder clearLatitude() {
        result.hasLatitude = false;
        result.latitude_ = 0D;
        return this;
      }
      
      // optional double Longitude = 10;
      public boolean hasLongitude() {
        return result.hasLongitude();
      }
      public double getLongitude() {
        return result.getLongitude();
      }
      public Builder setLongitude(double value) {
        result.hasLongitude = true;
        result.longitude_ = value;
        return this;
      }
      public Builder clearLongitude() {
        result.hasLongitude = false;
        result.longitude_ = 0D;
        return this;
      }
    }
    
    static {
      org.metasyntactic.protobuf.NowPlaying.internalForceInit();
    }
  }
  
  public static final class TheaterListingsProto extends
      com.google.protobuf.GeneratedMessageLite {
    // Use TheaterListingsProto.newBuilder() to construct.
    private TheaterListingsProto() {}
    
    private static final TheaterListingsProto defaultInstance = new TheaterListingsProto();
    public static TheaterListingsProto getDefaultInstance() {
      return defaultInstance;
    }
    
    public TheaterListingsProto getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final class TheaterAndMovieShowtimesProto extends
        com.google.protobuf.GeneratedMessageLite {
      // Use TheaterAndMovieShowtimesProto.newBuilder() to construct.
      private TheaterAndMovieShowtimesProto() {}
      
      private static final TheaterAndMovieShowtimesProto defaultInstance = new TheaterAndMovieShowtimesProto();
      public static TheaterAndMovieShowtimesProto getDefaultInstance() {
        return defaultInstance;
      }
      
      public TheaterAndMovieShowtimesProto getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final class MovieAndShowtimesProto extends
          com.google.protobuf.GeneratedMessageLite {
        // Use MovieAndShowtimesProto.newBuilder() to construct.
        private MovieAndShowtimesProto() {}
        
        private static final MovieAndShowtimesProto defaultInstance = new MovieAndShowtimesProto();
        public static MovieAndShowtimesProto getDefaultInstance() {
          return defaultInstance;
        }
        
        public MovieAndShowtimesProto getDefaultInstanceForType() {
          return defaultInstance;
        }
        
        // required string MovieIdentifier = 1;
        public static final int MOVIEIDENTIFIER_FIELD_NUMBER = 1;
        private boolean hasMovieIdentifier;
        private java.lang.String movieIdentifier_ = "";
        public boolean hasMovieIdentifier() { return hasMovieIdentifier; }
        public java.lang.String getMovieIdentifier() { return movieIdentifier_; }
        
        // required .AllShowtimesProto Showtimes = 2;
        public static final int SHOWTIMES_FIELD_NUMBER = 2;
        private boolean hasShowtimes;
        private org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto showtimes_ = org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto.getDefaultInstance();
        public boolean hasShowtimes() { return hasShowtimes; }
        public org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto getShowtimes() { return showtimes_; }
        
        
        public final boolean isInitialized() {
          if (!hasMovieIdentifier) return false;
          if (!hasShowtimes) return false;
          if (!getShowtimes().isInitialized()) return false;
          return true;
        }
        
        
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (hasMovieIdentifier()) {
            output.writeString(1, getMovieIdentifier());
          }
          if (hasShowtimes()) {
            output.writeMessage(2, getShowtimes());
          }
        }
        
        private int memoizedSerializedSize = -1;
        
        public int getSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
        
          size = 0;
          if (hasMovieIdentifier()) {
            size += com.google.protobuf.CodedOutputStream
              .computeStringSize(1, getMovieIdentifier());
          }
          if (hasShowtimes()) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(2, getShowtimes());
          }
          memoizedSerializedSize = size;
          return size;
        }
        
        public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return newBuilder().mergeFrom(data).buildParsed();
        }
        public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return newBuilder().mergeFrom(data, extensionRegistry)
                   .buildParsed();
        }
        public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return newBuilder().mergeFrom(data).buildParsed();
        }
        public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return newBuilder().mergeFrom(data, extensionRegistry)
                   .buildParsed();
        }
        public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return newBuilder().mergeFrom(input).buildParsed();
        }
        public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return newBuilder().mergeFrom(input, extensionRegistry)
                   .buildParsed();
        }
        public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return newBuilder().mergeDelimitedFrom(input).buildParsed();
        }
        public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
                   .buildParsed();
        }
        public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return newBuilder().mergeFrom(input).buildParsed();
        }
        public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return newBuilder().mergeFrom(input, extensionRegistry)
                   .buildParsed();
        }
        
        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto prototype) {
          return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }
        
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageLite.Builder<
              org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto, Builder> {
          private static final   com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder> builders =
              new com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder>();
          
          private org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto result;
          
          // Construct using org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto.newBuilder()
          private Builder() {}
          
          private static Builder create() {
            Builder builder = builders.get().poll();
            if (builder == null) {
              builder = new Builder();
            }
            builder.result = new org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto();
            return builder;
          }
          
          
          protected org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto internalGetResult() {
            return result;
          }
          
          
          public Builder clear() {
            if (result == null) {
              throw new IllegalStateException(
                "Cannot call clear() after build().");
            }
            result = new org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto();
            return this;
          }
          
          
          public Builder clone() {
            return create().mergeFrom(result);
          }
          
          public org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto getDefaultInstanceForType() {
            return org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto.getDefaultInstance();
          }
          
          public boolean isInitialized() {
            return result.isInitialized();
          }
          public org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto build() {
            if (result != null && !isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return buildPartial();
          }
          
          private org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto buildParsed()
              throws com.google.protobuf.InvalidProtocolBufferException {
            if (!isInitialized()) {
              throw newUninitializedMessageException(
                result).asInvalidProtocolBufferException();
            }
            return buildPartial();
          }
          
          public org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto buildPartial() {
            if (result == null) {
              throw new IllegalStateException(
                "build() has already been called on this Builder.");
            }
            org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto returnMe = result;
            result = null;
            builders.get().offer(this);
            return returnMe;
          }
          
          public Builder mergeFrom(org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto other) {
            if (other == org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto.getDefaultInstance()) return this;
            if (other.hasMovieIdentifier()) {
              setMovieIdentifier(other.getMovieIdentifier());
            }
            if (other.hasShowtimes()) {
              mergeShowtimes(other.getShowtimes());
            }
            return this;
          }
          
          
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            while (true) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  return this;
                default: {
                  if (!parseUnknownField(input, extensionRegistry, tag)) {
                    return this;
                  }
                  break;
                }
                case 10: {
                  setMovieIdentifier(input.readString());
                  break;
                }
                case 18: {
                  org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto.Builder subBuilder = org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto.newBuilder();
                  if (hasShowtimes()) {
                    subBuilder.mergeFrom(getShowtimes());
                  }
                  input.readMessage(subBuilder, extensionRegistry);
                  setShowtimes(subBuilder.buildPartial());
                  break;
                }
              }
            }
          }
          
          
          // required string MovieIdentifier = 1;
          public boolean hasMovieIdentifier() {
            return result.hasMovieIdentifier();
          }
          public java.lang.String getMovieIdentifier() {
            return result.getMovieIdentifier();
          }
          public Builder setMovieIdentifier(java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  result.hasMovieIdentifier = true;
            result.movieIdentifier_ = value;
            return this;
          }
          public Builder clearMovieIdentifier() {
            result.hasMovieIdentifier = false;
            result.movieIdentifier_ = getDefaultInstance().getMovieIdentifier();
            return this;
          }
          
          // required .AllShowtimesProto Showtimes = 2;
          public boolean hasShowtimes() {
            return result.hasShowtimes();
          }
          public org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto getShowtimes() {
            return result.getShowtimes();
          }
          public Builder setShowtimes(org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto value) {
            if (value == null) {
              throw new NullPointerException();
            }
            result.hasShowtimes = true;
            result.showtimes_ = value;
            return this;
          }
          public Builder setShowtimes(org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto.Builder builderForValue) {
            result.hasShowtimes = true;
            result.showtimes_ = builderForValue.build();
            return this;
          }
          public Builder mergeShowtimes(org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto value) {
            if (result.hasShowtimes() &&
                result.showtimes_ != org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto.getDefaultInstance()) {
              result.showtimes_ =
                org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto.newBuilder(result.showtimes_).mergeFrom(value).buildPartial();
            } else {
              result.showtimes_ = value;
            }
            result.hasShowtimes = true;
            return this;
          }
          public Builder clearShowtimes() {
            result.hasShowtimes = false;
            result.showtimes_ = org.metasyntactic.protobuf.NowPlaying.AllShowtimesProto.getDefaultInstance();
            return this;
          }
        }
        
        static {
          org.metasyntactic.protobuf.NowPlaying.internalForceInit();
        }
      }
      
      // required .TheaterProto Theater = 3;
      public static final int THEATER_FIELD_NUMBER = 3;
      private boolean hasTheater;
      private org.metasyntactic.protobuf.NowPlaying.TheaterProto theater_ = org.metasyntactic.protobuf.NowPlaying.TheaterProto.getDefaultInstance();
      public boolean hasTheater() { return hasTheater; }
      public org.metasyntactic.protobuf.NowPlaying.TheaterProto getTheater() { return theater_; }
      
      // repeated .TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto MovieAndShowtimes = 4;
      public static final int MOVIEANDSHOWTIMES_FIELD_NUMBER = 4;
      private java.util.List<org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto> movieAndShowtimes_ =
        java.util.Collections.emptyList();
      public java.util.List<org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto> getMovieAndShowtimesList() {
        return movieAndShowtimes_;
      }
      public int getMovieAndShowtimesCount() { return movieAndShowtimes_.size(); }
      public org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto getMovieAndShowtimes(int index) {
        return movieAndShowtimes_.get(index);
      }
      
      
      public final boolean isInitialized() {
        if (!hasTheater) return false;
        for (org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto element : getMovieAndShowtimesList()) {
          if (!element.isInitialized()) return false;
        }
        return true;
      }
      
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (hasTheater()) {
          output.writeMessage(3, getTheater());
        }
        for (org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto element : getMovieAndShowtimesList()) {
          output.writeMessage(4, element);
        }
      }
      
      private int memoizedSerializedSize = -1;
      
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasTheater()) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getTheater());
        }
        for (org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto element : getMovieAndShowtimesList()) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
      
      public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeDelimitedFrom(input).buildParsed();
      }
      public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto, Builder> {
        private static final   com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder> builders =
            new com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder>();
        
        private org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto result;
        
        // Construct using org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = builders.get().poll();
          if (builder == null) {
            builder = new Builder();
          }
          builder.result = new org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto();
          return builder;
        }
        
        
        protected org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto internalGetResult() {
          return result;
        }
        
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto();
          return this;
        }
        
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto getDefaultInstanceForType() {
          return org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          if (result.movieAndShowtimes_ != java.util.Collections.EMPTY_LIST) {
            result.movieAndShowtimes_ =
              java.util.Collections.unmodifiableList(result.movieAndShowtimes_);
          }
          org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto returnMe = result;
          result = null;
          builders.get().offer(this);
          return returnMe;
        }
        
        public Builder mergeFrom(org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto other) {
          if (other == org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.getDefaultInstance()) return this;
          if (other.hasTheater()) {
            mergeTheater(other.getTheater());
          }
          if (!other.movieAndShowtimes_.isEmpty()) {
            if (result.movieAndShowtimes_.isEmpty()) {
              result.movieAndShowtimes_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto>();
            }
            result.movieAndShowtimes_.addAll(other.movieAndShowtimes_);
          }
          return this;
        }
        
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                return this;
              default: {
                if (!parseUnknownField(input, extensionRegistry, tag)) {
                  return this;
                }
                break;
              }
              case 26: {
                org.metasyntactic.protobuf.NowPlaying.TheaterProto.Builder subBuilder = org.metasyntactic.protobuf.NowPlaying.TheaterProto.newBuilder();
                if (hasTheater()) {
                  subBuilder.mergeFrom(getTheater());
                }
                input.readMessage(subBuilder, extensionRegistry);
                setTheater(subBuilder.buildPartial());
                break;
              }
              case 34: {
                org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto.Builder subBuilder = org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto.newBuilder();
                input.readMessage(subBuilder, extensionRegistry);
                addMovieAndShowtimes(subBuilder.buildPartial());
                break;
              }
            }
          }
        }
        
        
        // required .TheaterProto Theater = 3;
        public boolean hasTheater() {
          return result.hasTheater();
        }
        public org.metasyntactic.protobuf.NowPlaying.TheaterProto getTheater() {
          return result.getTheater();
        }
        public Builder setTheater(org.metasyntactic.protobuf.NowPlaying.TheaterProto value) {
          if (value == null) {
            throw new NullPointerException();
          }
          result.hasTheater = true;
          result.theater_ = value;
          return this;
        }
        public Builder setTheater(org.metasyntactic.protobuf.NowPlaying.TheaterProto.Builder builderForValue) {
          result.hasTheater = true;
          result.theater_ = builderForValue.build();
          return this;
        }
        public Builder mergeTheater(org.metasyntactic.protobuf.NowPlaying.TheaterProto value) {
          if (result.hasTheater() &&
              result.theater_ != org.metasyntactic.protobuf.NowPlaying.TheaterProto.getDefaultInstance()) {
            result.theater_ =
              org.metasyntactic.protobuf.NowPlaying.TheaterProto.newBuilder(result.theater_).mergeFrom(value).buildPartial();
          } else {
            result.theater_ = value;
          }
          result.hasTheater = true;
          return this;
        }
        public Builder clearTheater() {
          result.hasTheater = false;
          result.theater_ = org.metasyntactic.protobuf.NowPlaying.TheaterProto.getDefaultInstance();
          return this;
        }
        
        // repeated .TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto MovieAndShowtimes = 4;
        public java.util.List<org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto> getMovieAndShowtimesList() {
          return java.util.Collections.unmodifiableList(result.movieAndShowtimes_);
        }
        public int getMovieAndShowtimesCount() {
          return result.getMovieAndShowtimesCount();
        }
        public org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto getMovieAndShowtimes(int index) {
          return result.getMovieAndShowtimes(index);
        }
        public Builder setMovieAndShowtimes(int index, org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto value) {
          if (value == null) {
            throw new NullPointerException();
          }
          result.movieAndShowtimes_.set(index, value);
          return this;
        }
        public Builder setMovieAndShowtimes(int index, org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto.Builder builderForValue) {
          result.movieAndShowtimes_.set(index, builderForValue.build());
          return this;
        }
        public Builder addMovieAndShowtimes(org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto value) {
          if (value == null) {
            throw new NullPointerException();
          }
          if (result.movieAndShowtimes_.isEmpty()) {
            result.movieAndShowtimes_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto>();
          }
          result.movieAndShowtimes_.add(value);
          return this;
        }
        public Builder addMovieAndShowtimes(org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto.Builder builderForValue) {
          if (result.movieAndShowtimes_.isEmpty()) {
            result.movieAndShowtimes_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto>();
          }
          result.movieAndShowtimes_.add(builderForValue.build());
          return this;
        }
        public Builder addAllMovieAndShowtimes(
            java.lang.Iterable<? extends org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto> values) {
          if (result.movieAndShowtimes_.isEmpty()) {
            result.movieAndShowtimes_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.MovieAndShowtimesProto>();
          }
          super.addAll(values, result.movieAndShowtimes_);
          return this;
        }
        public Builder clearMovieAndShowtimes() {
          result.movieAndShowtimes_ = java.util.Collections.emptyList();
          return this;
        }
      }
      
      static {
        org.metasyntactic.protobuf.NowPlaying.internalForceInit();
      }
    }
    
    // repeated .MovieProto Movies = 5;
    public static final int MOVIES_FIELD_NUMBER = 5;
    private java.util.List<org.metasyntactic.protobuf.NowPlaying.MovieProto> movies_ =
      java.util.Collections.emptyList();
    public java.util.List<org.metasyntactic.protobuf.NowPlaying.MovieProto> getMoviesList() {
      return movies_;
    }
    public int getMoviesCount() { return movies_.size(); }
    public org.metasyntactic.protobuf.NowPlaying.MovieProto getMovies(int index) {
      return movies_.get(index);
    }
    
    // repeated .TheaterListingsProto.TheaterAndMovieShowtimesProto TheaterAndMovieShowtimes = 6;
    public static final int THEATERANDMOVIESHOWTIMES_FIELD_NUMBER = 6;
    private java.util.List<org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto> theaterAndMovieShowtimes_ =
      java.util.Collections.emptyList();
    public java.util.List<org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto> getTheaterAndMovieShowtimesList() {
      return theaterAndMovieShowtimes_;
    }
    public int getTheaterAndMovieShowtimesCount() { return theaterAndMovieShowtimes_.size(); }
    public org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto getTheaterAndMovieShowtimes(int index) {
      return theaterAndMovieShowtimes_.get(index);
    }
    
    
    public final boolean isInitialized() {
      for (org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto element : getTheaterAndMovieShowtimesList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (org.metasyntactic.protobuf.NowPlaying.MovieProto element : getMoviesList()) {
        output.writeMessage(5, element);
      }
      for (org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto element : getTheaterAndMovieShowtimesList()) {
        output.writeMessage(6, element);
      }
    }
    
    private int memoizedSerializedSize = -1;
    
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (org.metasyntactic.protobuf.NowPlaying.MovieProto element : getMoviesList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, element);
      }
      for (org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto element : getTheaterAndMovieShowtimesList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto, Builder> {
      private static final   com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder> builders =
          new com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder>();
      
      private org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto result;
      
      // Construct using org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = builders.get().poll();
        if (builder == null) {
          builder = new Builder();
        }
        builder.result = new org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto();
        return builder;
      }
      
      
      protected org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto internalGetResult() {
        return result;
      }
      
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto();
        return this;
      }
      
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto getDefaultInstanceForType() {
        return org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.movies_ != java.util.Collections.EMPTY_LIST) {
          result.movies_ =
            java.util.Collections.unmodifiableList(result.movies_);
        }
        if (result.theaterAndMovieShowtimes_ != java.util.Collections.EMPTY_LIST) {
          result.theaterAndMovieShowtimes_ =
            java.util.Collections.unmodifiableList(result.theaterAndMovieShowtimes_);
        }
        org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto returnMe = result;
        result = null;
        builders.get().offer(this);
        return returnMe;
      }
      
      public Builder mergeFrom(org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto other) {
        if (other == org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.getDefaultInstance()) return this;
        if (!other.movies_.isEmpty()) {
          if (result.movies_.isEmpty()) {
            result.movies_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.MovieProto>();
          }
          result.movies_.addAll(other.movies_);
        }
        if (!other.theaterAndMovieShowtimes_.isEmpty()) {
          if (result.theaterAndMovieShowtimes_.isEmpty()) {
            result.theaterAndMovieShowtimes_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto>();
          }
          result.theaterAndMovieShowtimes_.addAll(other.theaterAndMovieShowtimes_);
        }
        return this;
      }
      
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 42: {
              org.metasyntactic.protobuf.NowPlaying.MovieProto.Builder subBuilder = org.metasyntactic.protobuf.NowPlaying.MovieProto.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addMovies(subBuilder.buildPartial());
              break;
            }
            case 50: {
              org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.Builder subBuilder = org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addTheaterAndMovieShowtimes(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .MovieProto Movies = 5;
      public java.util.List<org.metasyntactic.protobuf.NowPlaying.MovieProto> getMoviesList() {
        return java.util.Collections.unmodifiableList(result.movies_);
      }
      public int getMoviesCount() {
        return result.getMoviesCount();
      }
      public org.metasyntactic.protobuf.NowPlaying.MovieProto getMovies(int index) {
        return result.getMovies(index);
      }
      public Builder setMovies(int index, org.metasyntactic.protobuf.NowPlaying.MovieProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.movies_.set(index, value);
        return this;
      }
      public Builder setMovies(int index, org.metasyntactic.protobuf.NowPlaying.MovieProto.Builder builderForValue) {
        result.movies_.set(index, builderForValue.build());
        return this;
      }
      public Builder addMovies(org.metasyntactic.protobuf.NowPlaying.MovieProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.movies_.isEmpty()) {
          result.movies_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.MovieProto>();
        }
        result.movies_.add(value);
        return this;
      }
      public Builder addMovies(org.metasyntactic.protobuf.NowPlaying.MovieProto.Builder builderForValue) {
        if (result.movies_.isEmpty()) {
          result.movies_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.MovieProto>();
        }
        result.movies_.add(builderForValue.build());
        return this;
      }
      public Builder addAllMovies(
          java.lang.Iterable<? extends org.metasyntactic.protobuf.NowPlaying.MovieProto> values) {
        if (result.movies_.isEmpty()) {
          result.movies_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.MovieProto>();
        }
        super.addAll(values, result.movies_);
        return this;
      }
      public Builder clearMovies() {
        result.movies_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .TheaterListingsProto.TheaterAndMovieShowtimesProto TheaterAndMovieShowtimes = 6;
      public java.util.List<org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto> getTheaterAndMovieShowtimesList() {
        return java.util.Collections.unmodifiableList(result.theaterAndMovieShowtimes_);
      }
      public int getTheaterAndMovieShowtimesCount() {
        return result.getTheaterAndMovieShowtimesCount();
      }
      public org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto getTheaterAndMovieShowtimes(int index) {
        return result.getTheaterAndMovieShowtimes(index);
      }
      public Builder setTheaterAndMovieShowtimes(int index, org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.theaterAndMovieShowtimes_.set(index, value);
        return this;
      }
      public Builder setTheaterAndMovieShowtimes(int index, org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.Builder builderForValue) {
        result.theaterAndMovieShowtimes_.set(index, builderForValue.build());
        return this;
      }
      public Builder addTheaterAndMovieShowtimes(org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.theaterAndMovieShowtimes_.isEmpty()) {
          result.theaterAndMovieShowtimes_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto>();
        }
        result.theaterAndMovieShowtimes_.add(value);
        return this;
      }
      public Builder addTheaterAndMovieShowtimes(org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto.Builder builderForValue) {
        if (result.theaterAndMovieShowtimes_.isEmpty()) {
          result.theaterAndMovieShowtimes_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto>();
        }
        result.theaterAndMovieShowtimes_.add(builderForValue.build());
        return this;
      }
      public Builder addAllTheaterAndMovieShowtimes(
          java.lang.Iterable<? extends org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto> values) {
        if (result.theaterAndMovieShowtimes_.isEmpty()) {
          result.theaterAndMovieShowtimes_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.TheaterListingsProto.TheaterAndMovieShowtimesProto>();
        }
        super.addAll(values, result.theaterAndMovieShowtimes_);
        return this;
      }
      public Builder clearTheaterAndMovieShowtimes() {
        result.theaterAndMovieShowtimes_ = java.util.Collections.emptyList();
        return this;
      }
    }
    
    static {
      org.metasyntactic.protobuf.NowPlaying.internalForceInit();
    }
  }
  
  public static final class ReviewProto extends
      com.google.protobuf.GeneratedMessageLite {
    // Use ReviewProto.newBuilder() to construct.
    private ReviewProto() {}
    
    private static final ReviewProto defaultInstance = new ReviewProto();
    public static ReviewProto getDefaultInstance() {
      return defaultInstance;
    }
    
    public ReviewProto getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional string Title = 1;
    public static final int TITLE_FIELD_NUMBER = 1;
    private boolean hasTitle;
    private java.lang.String title_ = "";
    public boolean hasTitle() { return hasTitle; }
    public java.lang.String getTitle() { return title_; }
    
    // optional string Url = 2;
    public static final int URL_FIELD_NUMBER = 2;
    private boolean hasUrl;
    private java.lang.String url_ = "";
    public boolean hasUrl() { return hasUrl; }
    public java.lang.String getUrl() { return url_; }
    
    // optional float Rating = 3;
    public static final int RATING_FIELD_NUMBER = 3;
    private boolean hasRating;
    private float rating_ = 0F;
    public boolean hasRating() { return hasRating; }
    public float getRating() { return rating_; }
    
    // optional string Snippet = 4;
    public static final int SNIPPET_FIELD_NUMBER = 4;
    private boolean hasSnippet;
    private java.lang.String snippet_ = "";
    public boolean hasSnippet() { return hasSnippet; }
    public java.lang.String getSnippet() { return snippet_; }
    
    // optional string Content = 5;
    public static final int CONTENT_FIELD_NUMBER = 5;
    private boolean hasContent;
    private java.lang.String content_ = "";
    public boolean hasContent() { return hasContent; }
    public java.lang.String getContent() { return content_; }
    
    // optional string Publisher = 6;
    public static final int PUBLISHER_FIELD_NUMBER = 6;
    private boolean hasPublisher;
    private java.lang.String publisher_ = "";
    public boolean hasPublisher() { return hasPublisher; }
    public java.lang.String getPublisher() { return publisher_; }
    
    // optional string Author = 7;
    public static final int AUTHOR_FIELD_NUMBER = 7;
    private boolean hasAuthor;
    private java.lang.String author_ = "";
    public boolean hasAuthor() { return hasAuthor; }
    public java.lang.String getAuthor() { return author_; }
    
    // optional string Date = 8;
    public static final int DATE_FIELD_NUMBER = 8;
    private boolean hasDate;
    private java.lang.String date_ = "";
    public boolean hasDate() { return hasDate; }
    public java.lang.String getDate() { return date_; }
    
    
    public final boolean isInitialized() {
      return true;
    }
    
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasTitle()) {
        output.writeString(1, getTitle());
      }
      if (hasUrl()) {
        output.writeString(2, getUrl());
      }
      if (hasRating()) {
        output.writeFloat(3, getRating());
      }
      if (hasSnippet()) {
        output.writeString(4, getSnippet());
      }
      if (hasContent()) {
        output.writeString(5, getContent());
      }
      if (hasPublisher()) {
        output.writeString(6, getPublisher());
      }
      if (hasAuthor()) {
        output.writeString(7, getAuthor());
      }
      if (hasDate()) {
        output.writeString(8, getDate());
      }
    }
    
    private int memoizedSerializedSize = -1;
    
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTitle()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getTitle());
      }
      if (hasUrl()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getUrl());
      }
      if (hasRating()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, getRating());
      }
      if (hasSnippet()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getSnippet());
      }
      if (hasContent()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getContent());
      }
      if (hasPublisher()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getPublisher());
      }
      if (hasAuthor()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(7, getAuthor());
      }
      if (hasDate()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(8, getDate());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.metasyntactic.protobuf.NowPlaying.ReviewProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.metasyntactic.protobuf.NowPlaying.ReviewProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.metasyntactic.protobuf.NowPlaying.ReviewProto, Builder> {
      private static final   com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder> builders =
          new com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder>();
      
      private org.metasyntactic.protobuf.NowPlaying.ReviewProto result;
      
      // Construct using org.metasyntactic.protobuf.NowPlaying.ReviewProto.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = builders.get().poll();
        if (builder == null) {
          builder = new Builder();
        }
        builder.result = new org.metasyntactic.protobuf.NowPlaying.ReviewProto();
        return builder;
      }
      
      
      protected org.metasyntactic.protobuf.NowPlaying.ReviewProto internalGetResult() {
        return result;
      }
      
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.metasyntactic.protobuf.NowPlaying.ReviewProto();
        return this;
      }
      
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.metasyntactic.protobuf.NowPlaying.ReviewProto getDefaultInstanceForType() {
        return org.metasyntactic.protobuf.NowPlaying.ReviewProto.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.metasyntactic.protobuf.NowPlaying.ReviewProto build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.metasyntactic.protobuf.NowPlaying.ReviewProto buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.metasyntactic.protobuf.NowPlaying.ReviewProto buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.metasyntactic.protobuf.NowPlaying.ReviewProto returnMe = result;
        result = null;
        builders.get().offer(this);
        return returnMe;
      }
      
      public Builder mergeFrom(org.metasyntactic.protobuf.NowPlaying.ReviewProto other) {
        if (other == org.metasyntactic.protobuf.NowPlaying.ReviewProto.getDefaultInstance()) return this;
        if (other.hasTitle()) {
          setTitle(other.getTitle());
        }
        if (other.hasUrl()) {
          setUrl(other.getUrl());
        }
        if (other.hasRating()) {
          setRating(other.getRating());
        }
        if (other.hasSnippet()) {
          setSnippet(other.getSnippet());
        }
        if (other.hasContent()) {
          setContent(other.getContent());
        }
        if (other.hasPublisher()) {
          setPublisher(other.getPublisher());
        }
        if (other.hasAuthor()) {
          setAuthor(other.getAuthor());
        }
        if (other.hasDate()) {
          setDate(other.getDate());
        }
        return this;
      }
      
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setTitle(input.readString());
              break;
            }
            case 18: {
              setUrl(input.readString());
              break;
            }
            case 29: {
              setRating(input.readFloat());
              break;
            }
            case 34: {
              setSnippet(input.readString());
              break;
            }
            case 42: {
              setContent(input.readString());
              break;
            }
            case 50: {
              setPublisher(input.readString());
              break;
            }
            case 58: {
              setAuthor(input.readString());
              break;
            }
            case 66: {
              setDate(input.readString());
              break;
            }
          }
        }
      }
      
      
      // optional string Title = 1;
      public boolean hasTitle() {
        return result.hasTitle();
      }
      public java.lang.String getTitle() {
        return result.getTitle();
      }
      public Builder setTitle(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder clearTitle() {
        result.hasTitle = false;
        result.title_ = getDefaultInstance().getTitle();
        return this;
      }
      
      // optional string Url = 2;
      public boolean hasUrl() {
        return result.hasUrl();
      }
      public java.lang.String getUrl() {
        return result.getUrl();
      }
      public Builder setUrl(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder clearUrl() {
        result.hasUrl = false;
        result.url_ = getDefaultInstance().getUrl();
        return this;
      }
      
      // optional float Rating = 3;
      public boolean hasRating() {
        return result.hasRating();
      }
      public float getRating() {
        return result.getRating();
      }
      public Builder setRating(float value) {
        result.hasRating = true;
        result.rating_ = value;
        return this;
      }
      public Builder clearRating() {
        result.hasRating = false;
        result.rating_ = 0F;
        return this;
      }
      
      // optional string Snippet = 4;
      public boolean hasSnippet() {
        return result.hasSnippet();
      }
      public java.lang.String getSnippet() {
        return result.getSnippet();
      }
      public Builder setSnippet(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSnippet = true;
        result.snippet_ = value;
        return this;
      }
      public Builder clearSnippet() {
        result.hasSnippet = false;
        result.snippet_ = getDefaultInstance().getSnippet();
        return this;
      }
      
      // optional string Content = 5;
      public boolean hasContent() {
        return result.hasContent();
      }
      public java.lang.String getContent() {
        return result.getContent();
      }
      public Builder setContent(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder clearContent() {
        result.hasContent = false;
        result.content_ = getDefaultInstance().getContent();
        return this;
      }
      
      // optional string Publisher = 6;
      public boolean hasPublisher() {
        return result.hasPublisher();
      }
      public java.lang.String getPublisher() {
        return result.getPublisher();
      }
      public Builder setPublisher(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasPublisher = true;
        result.publisher_ = value;
        return this;
      }
      public Builder clearPublisher() {
        result.hasPublisher = false;
        result.publisher_ = getDefaultInstance().getPublisher();
        return this;
      }
      
      // optional string Author = 7;
      public boolean hasAuthor() {
        return result.hasAuthor();
      }
      public java.lang.String getAuthor() {
        return result.getAuthor();
      }
      public Builder setAuthor(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasAuthor = true;
        result.author_ = value;
        return this;
      }
      public Builder clearAuthor() {
        result.hasAuthor = false;
        result.author_ = getDefaultInstance().getAuthor();
        return this;
      }
      
      // optional string Date = 8;
      public boolean hasDate() {
        return result.hasDate();
      }
      public java.lang.String getDate() {
        return result.getDate();
      }
      public Builder setDate(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasDate = true;
        result.date_ = value;
        return this;
      }
      public Builder clearDate() {
        result.hasDate = false;
        result.date_ = getDefaultInstance().getDate();
        return this;
      }
    }
    
    static {
      org.metasyntactic.protobuf.NowPlaying.internalForceInit();
    }
  }
  
  public static final class ReviewsListProto extends
      com.google.protobuf.GeneratedMessageLite {
    // Use ReviewsListProto.newBuilder() to construct.
    private ReviewsListProto() {}
    
    private static final ReviewsListProto defaultInstance = new ReviewsListProto();
    public static ReviewsListProto getDefaultInstance() {
      return defaultInstance;
    }
    
    public ReviewsListProto getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // repeated .ReviewProto reviews = 1;
    public static final int REVIEWS_FIELD_NUMBER = 1;
    private java.util.List<org.metasyntactic.protobuf.NowPlaying.ReviewProto> reviews_ =
      java.util.Collections.emptyList();
    public java.util.List<org.metasyntactic.protobuf.NowPlaying.ReviewProto> getReviewsList() {
      return reviews_;
    }
    public int getReviewsCount() { return reviews_.size(); }
    public org.metasyntactic.protobuf.NowPlaying.ReviewProto getReviews(int index) {
      return reviews_.get(index);
    }
    
    
    public final boolean isInitialized() {
      return true;
    }
    
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (org.metasyntactic.protobuf.NowPlaying.ReviewProto element : getReviewsList()) {
        output.writeMessage(1, element);
      }
    }
    
    private int memoizedSerializedSize = -1;
    
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (org.metasyntactic.protobuf.NowPlaying.ReviewProto element : getReviewsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.metasyntactic.protobuf.NowPlaying.ReviewsListProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewsListProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewsListProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewsListProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewsListProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewsListProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewsListProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewsListProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewsListProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.metasyntactic.protobuf.NowPlaying.ReviewsListProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.metasyntactic.protobuf.NowPlaying.ReviewsListProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.metasyntactic.protobuf.NowPlaying.ReviewsListProto, Builder> {
      private static final   com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder> builders =
          new com.google.protobuf.Internal.ThreadLocalQuickQueue<Builder>();
      
      private org.metasyntactic.protobuf.NowPlaying.ReviewsListProto result;
      
      // Construct using org.metasyntactic.protobuf.NowPlaying.ReviewsListProto.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = builders.get().poll();
        if (builder == null) {
          builder = new Builder();
        }
        builder.result = new org.metasyntactic.protobuf.NowPlaying.ReviewsListProto();
        return builder;
      }
      
      
      protected org.metasyntactic.protobuf.NowPlaying.ReviewsListProto internalGetResult() {
        return result;
      }
      
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.metasyntactic.protobuf.NowPlaying.ReviewsListProto();
        return this;
      }
      
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.metasyntactic.protobuf.NowPlaying.ReviewsListProto getDefaultInstanceForType() {
        return org.metasyntactic.protobuf.NowPlaying.ReviewsListProto.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.metasyntactic.protobuf.NowPlaying.ReviewsListProto build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.metasyntactic.protobuf.NowPlaying.ReviewsListProto buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.metasyntactic.protobuf.NowPlaying.ReviewsListProto buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.reviews_ != java.util.Collections.EMPTY_LIST) {
          result.reviews_ =
            java.util.Collections.unmodifiableList(result.reviews_);
        }
        org.metasyntactic.protobuf.NowPlaying.ReviewsListProto returnMe = result;
        result = null;
        builders.get().offer(this);
        return returnMe;
      }
      
      public Builder mergeFrom(org.metasyntactic.protobuf.NowPlaying.ReviewsListProto other) {
        if (other == org.metasyntactic.protobuf.NowPlaying.ReviewsListProto.getDefaultInstance()) return this;
        if (!other.reviews_.isEmpty()) {
          if (result.reviews_.isEmpty()) {
            result.reviews_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.ReviewProto>();
          }
          result.reviews_.addAll(other.reviews_);
        }
        return this;
      }
      
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              org.metasyntactic.protobuf.NowPlaying.ReviewProto.Builder subBuilder = org.metasyntactic.protobuf.NowPlaying.ReviewProto.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addReviews(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .ReviewProto reviews = 1;
      public java.util.List<org.metasyntactic.protobuf.NowPlaying.ReviewProto> getReviewsList() {
        return java.util.Collections.unmodifiableList(result.reviews_);
      }
      public int getReviewsCount() {
        return result.getReviewsCount();
      }
      public org.metasyntactic.protobuf.NowPlaying.ReviewProto getReviews(int index) {
        return result.getReviews(index);
      }
      public Builder setReviews(int index, org.metasyntactic.protobuf.NowPlaying.ReviewProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.reviews_.set(index, value);
        return this;
      }
      public Builder setReviews(int index, org.metasyntactic.protobuf.NowPlaying.ReviewProto.Builder builderForValue) {
        result.reviews_.set(index, builderForValue.build());
        return this;
      }
      public Builder addReviews(org.metasyntactic.protobuf.NowPlaying.ReviewProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.reviews_.isEmpty()) {
          result.reviews_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.ReviewProto>();
        }
        result.reviews_.add(value);
        return this;
      }
      public Builder addReviews(org.metasyntactic.protobuf.NowPlaying.ReviewProto.Builder builderForValue) {
        if (result.reviews_.isEmpty()) {
          result.reviews_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.ReviewProto>();
        }
        result.reviews_.add(builderForValue.build());
        return this;
      }
      public Builder addAllReviews(
          java.lang.Iterable<? extends org.metasyntactic.protobuf.NowPlaying.ReviewProto> values) {
        if (result.reviews_.isEmpty()) {
          result.reviews_ = new java.util.ArrayList<org.metasyntactic.protobuf.NowPlaying.ReviewProto>();
        }
        super.addAll(values, result.reviews_);
        return this;
      }
      public Builder clearReviews() {
        result.reviews_ = java.util.Collections.emptyList();
        return this;
      }
    }
    
    static {
      org.metasyntactic.protobuf.NowPlaying.internalForceInit();
    }
  }
  
  
  static {
  }
  
  public static void internalForceInit() {}
}
