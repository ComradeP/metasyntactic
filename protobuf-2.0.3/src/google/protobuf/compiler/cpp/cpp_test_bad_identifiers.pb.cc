// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "google/protobuf/compiler/cpp/cpp_test_bad_identifiers.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace protobuf_unittest {

namespace {

const ::google::protobuf::Descriptor* TestConflictingSymbolNames_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_BuildDescriptors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_BuildDescriptors_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_TypeTraits_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_TypeTraits_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Cord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_Cord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_StringPiece_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_StringPiece_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_DO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_DO_reflection_ = NULL;
const ::google::protobuf::Descriptor* DummyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DummyMessage_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* TestConflictingMethodNames_descriptor_ = NULL;

}  // namespace


void protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto_AssignGlobalDescriptors(const ::google::protobuf::FileDescriptor* file) {
  TestConflictingSymbolNames_descriptor_ = file->message_type(0);
  TestConflictingSymbolNames::default_instance_ = new TestConflictingSymbolNames();
  static const int TestConflictingSymbolNames_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, new_element_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, total_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, handle_uninterpreted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, controller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, already_here_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, memset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, cached_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, extensions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, offsets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, reflection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, some_cord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, some_string_piece_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, int__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, friend__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, do__),
  };
  TestConflictingSymbolNames_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_descriptor_,
      TestConflictingSymbolNames::default_instance_,
      TestConflictingSymbolNames_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(TestConflictingSymbolNames));
  TestConflictingSymbolNames_BuildDescriptors_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(0);
  TestConflictingSymbolNames_BuildDescriptors::default_instance_ = new TestConflictingSymbolNames_BuildDescriptors();
  static const int TestConflictingSymbolNames_BuildDescriptors_offsets_[1] = {
  };
  TestConflictingSymbolNames_BuildDescriptors_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_BuildDescriptors_descriptor_,
      TestConflictingSymbolNames_BuildDescriptors::default_instance_,
      TestConflictingSymbolNames_BuildDescriptors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_BuildDescriptors, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_BuildDescriptors, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(TestConflictingSymbolNames_BuildDescriptors));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_BuildDescriptors_descriptor_, TestConflictingSymbolNames_BuildDescriptors::default_instance_);
  TestConflictingSymbolNames_TypeTraits_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(1);
  TestConflictingSymbolNames_TypeTraits::default_instance_ = new TestConflictingSymbolNames_TypeTraits();
  static const int TestConflictingSymbolNames_TypeTraits_offsets_[1] = {
  };
  TestConflictingSymbolNames_TypeTraits_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_TypeTraits_descriptor_,
      TestConflictingSymbolNames_TypeTraits::default_instance_,
      TestConflictingSymbolNames_TypeTraits_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_TypeTraits, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_TypeTraits, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(TestConflictingSymbolNames_TypeTraits));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_TypeTraits_descriptor_, TestConflictingSymbolNames_TypeTraits::default_instance_);
  TestConflictingSymbolNames_Cord_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(2);
  TestConflictingSymbolNames_Cord::default_instance_ = new TestConflictingSymbolNames_Cord();
  static const int TestConflictingSymbolNames_Cord_offsets_[1] = {
  };
  TestConflictingSymbolNames_Cord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_Cord_descriptor_,
      TestConflictingSymbolNames_Cord::default_instance_,
      TestConflictingSymbolNames_Cord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Cord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Cord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(TestConflictingSymbolNames_Cord));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_Cord_descriptor_, TestConflictingSymbolNames_Cord::default_instance_);
  TestConflictingSymbolNames_StringPiece_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(3);
  TestConflictingSymbolNames_StringPiece::default_instance_ = new TestConflictingSymbolNames_StringPiece();
  static const int TestConflictingSymbolNames_StringPiece_offsets_[1] = {
  };
  TestConflictingSymbolNames_StringPiece_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_StringPiece_descriptor_,
      TestConflictingSymbolNames_StringPiece::default_instance_,
      TestConflictingSymbolNames_StringPiece_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_StringPiece, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_StringPiece, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(TestConflictingSymbolNames_StringPiece));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_StringPiece_descriptor_, TestConflictingSymbolNames_StringPiece::default_instance_);
  TestConflictingSymbolNames_DO_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(4);
  TestConflictingSymbolNames_DO::default_instance_ = new TestConflictingSymbolNames_DO();
  static const int TestConflictingSymbolNames_DO_offsets_[1] = {
  };
  TestConflictingSymbolNames_DO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_DO_descriptor_,
      TestConflictingSymbolNames_DO::default_instance_,
      TestConflictingSymbolNames_DO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_DO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_DO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(TestConflictingSymbolNames_DO));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_DO_descriptor_, TestConflictingSymbolNames_DO::default_instance_);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_descriptor_, TestConflictingSymbolNames::default_instance_);
  DummyMessage_descriptor_ = file->message_type(1);
  DummyMessage::default_instance_ = new DummyMessage();
  static const int DummyMessage_offsets_[1] = {
  };
  DummyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DummyMessage_descriptor_,
      DummyMessage::default_instance_,
      DummyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(DummyMessage));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DummyMessage_descriptor_, DummyMessage::default_instance_);
  TestConflictingMethodNames_descriptor_ = file->service(0);
  TestConflictingSymbolNames::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_BuildDescriptors::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_TypeTraits::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_Cord::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_StringPiece::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_DO::default_instance_->InitAsDefaultInstance();
  DummyMessage::default_instance_->InitAsDefaultInstance();
}

void protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;
  ::google::protobuf::DescriptorPool* pool =
    ::google::protobuf::DescriptorPool::internal_generated_pool();

  pool->InternalBuildGeneratedFile(
    "\n;google/protobuf/compiler/cpp/cpp_test_"
    "bad_identifiers.proto\022\021protobuf_unittest"
    "\"\304\005\n\032TestConflictingSymbolNames\022\r\n\005input"
    "\030\001 \001(\005\022\016\n\006output\030\002 \001(\005\022\016\n\006length\030\003 \001(\t\022\t"
    "\n\001i\030\004 \003(\005\022\027\n\013new_element\030\005 \003(\tB\002\010\002\022\022\n\nto"
    "tal_size\030\006 \001(\005\022\013\n\003tag\030\007 \001(\005\022\016\n\006source\030\010 "
    "\001(\005\022\r\n\005value\030\t \001(\005\022\014\n\004file\030\n \001(\005\022\014\n\004from"
    "\030\013 \001(\005\022\034\n\024handle_uninterpreted\030\014 \001(\005\022\r\n\005"
    "index\030\r \003(\005\022\022\n\ncontroller\030\016 \001(\005\022\024\n\014alrea"
    "dy_here\030\017 \001(\005\022\016\n\006uint32\030\020 \001(\r\022\016\n\006uint64\030"
    "\021 \001(\004\022\016\n\006string\030\022 \001(\t\022\016\n\006memset\030\023 \001(\005\022\r\n"
    "\005int32\030\024 \001(\005\022\r\n\005int64\030\025 \001(\003\022\023\n\013cached_si"
    "ze\030\026 \001(\r\022\022\n\nextensions\030\027 \001(\r\022\013\n\003bit\030\030 \001("
    "\r\022\014\n\004bits\030\031 \001(\r\022\017\n\007offsets\030\032 \001(\r\022\022\n\nrefl"
    "ection\030\033 \001(\r\022\025\n\tsome_cord\030\034 \001(\tB\002\010\001\022\035\n\021s"
    "ome_string_piece\030\035 \001(\tB\002\010\002\022\013\n\003int\030\036 \001(\r\022"
    "\016\n\006friend\030\037 \001(\r\022<\n\002do\030  \001(\01320.protobuf_u"
    "nittest.TestConflictingSymbolNames.DO\032\022\n"
    "\020BuildDescriptors\032\014\n\nTypeTraits\032\006\n\004Cord\032"
    "\r\n\013StringPiece\032\004\n\002DO*\t\010\350\007\020\200\200\200\200\002\"\016\n\014Dummy"
    "Message2i\n\032TestConflictingMethodNames\022K\n"
    "\007Closure\022\037.protobuf_unittest.DummyMessag"
    "e\032\037.protobuf_unittest.DummyMessage", 914,
  &protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto_AssignGlobalDescriptors);
}

// Force BuildDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto {
  StaticDescriptorInitializer_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto() {
    protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  }
} static_descriptor_initializer_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto_;


// ===================================================================

TestConflictingSymbolNames_BuildDescriptors::TestConflictingSymbolNames_BuildDescriptors()
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void TestConflictingSymbolNames_BuildDescriptors::InitAsDefaultInstance() {}

TestConflictingSymbolNames_BuildDescriptors::TestConflictingSymbolNames_BuildDescriptors(const TestConflictingSymbolNames_BuildDescriptors& from)
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

TestConflictingSymbolNames_BuildDescriptors::~TestConflictingSymbolNames_BuildDescriptors() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestConflictingSymbolNames_BuildDescriptors::descriptor() {
  if (TestConflictingSymbolNames_BuildDescriptors_descriptor_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return TestConflictingSymbolNames_BuildDescriptors_descriptor_;
}

const TestConflictingSymbolNames_BuildDescriptors& TestConflictingSymbolNames_BuildDescriptors::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_BuildDescriptors* TestConflictingSymbolNames_BuildDescriptors::default_instance_ = NULL;

TestConflictingSymbolNames_BuildDescriptors* TestConflictingSymbolNames_BuildDescriptors::New() const {
  return new TestConflictingSymbolNames_BuildDescriptors;
}

const ::google::protobuf::Descriptor* TestConflictingSymbolNames_BuildDescriptors::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* TestConflictingSymbolNames_BuildDescriptors::GetReflection() const {
  if (TestConflictingSymbolNames_BuildDescriptors_reflection_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return TestConflictingSymbolNames_BuildDescriptors_reflection_;
}

// -------------------------------------------------------------------

TestConflictingSymbolNames_TypeTraits::TestConflictingSymbolNames_TypeTraits()
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void TestConflictingSymbolNames_TypeTraits::InitAsDefaultInstance() {}

TestConflictingSymbolNames_TypeTraits::TestConflictingSymbolNames_TypeTraits(const TestConflictingSymbolNames_TypeTraits& from)
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

TestConflictingSymbolNames_TypeTraits::~TestConflictingSymbolNames_TypeTraits() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestConflictingSymbolNames_TypeTraits::descriptor() {
  if (TestConflictingSymbolNames_TypeTraits_descriptor_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return TestConflictingSymbolNames_TypeTraits_descriptor_;
}

const TestConflictingSymbolNames_TypeTraits& TestConflictingSymbolNames_TypeTraits::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_TypeTraits* TestConflictingSymbolNames_TypeTraits::default_instance_ = NULL;

TestConflictingSymbolNames_TypeTraits* TestConflictingSymbolNames_TypeTraits::New() const {
  return new TestConflictingSymbolNames_TypeTraits;
}

const ::google::protobuf::Descriptor* TestConflictingSymbolNames_TypeTraits::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* TestConflictingSymbolNames_TypeTraits::GetReflection() const {
  if (TestConflictingSymbolNames_TypeTraits_reflection_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return TestConflictingSymbolNames_TypeTraits_reflection_;
}

// -------------------------------------------------------------------

TestConflictingSymbolNames_Cord::TestConflictingSymbolNames_Cord()
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void TestConflictingSymbolNames_Cord::InitAsDefaultInstance() {}

TestConflictingSymbolNames_Cord::TestConflictingSymbolNames_Cord(const TestConflictingSymbolNames_Cord& from)
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

TestConflictingSymbolNames_Cord::~TestConflictingSymbolNames_Cord() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Cord::descriptor() {
  if (TestConflictingSymbolNames_Cord_descriptor_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return TestConflictingSymbolNames_Cord_descriptor_;
}

const TestConflictingSymbolNames_Cord& TestConflictingSymbolNames_Cord::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_Cord* TestConflictingSymbolNames_Cord::default_instance_ = NULL;

TestConflictingSymbolNames_Cord* TestConflictingSymbolNames_Cord::New() const {
  return new TestConflictingSymbolNames_Cord;
}

const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Cord::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* TestConflictingSymbolNames_Cord::GetReflection() const {
  if (TestConflictingSymbolNames_Cord_reflection_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return TestConflictingSymbolNames_Cord_reflection_;
}

// -------------------------------------------------------------------

TestConflictingSymbolNames_StringPiece::TestConflictingSymbolNames_StringPiece()
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void TestConflictingSymbolNames_StringPiece::InitAsDefaultInstance() {}

TestConflictingSymbolNames_StringPiece::TestConflictingSymbolNames_StringPiece(const TestConflictingSymbolNames_StringPiece& from)
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

TestConflictingSymbolNames_StringPiece::~TestConflictingSymbolNames_StringPiece() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestConflictingSymbolNames_StringPiece::descriptor() {
  if (TestConflictingSymbolNames_StringPiece_descriptor_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return TestConflictingSymbolNames_StringPiece_descriptor_;
}

const TestConflictingSymbolNames_StringPiece& TestConflictingSymbolNames_StringPiece::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_StringPiece* TestConflictingSymbolNames_StringPiece::default_instance_ = NULL;

TestConflictingSymbolNames_StringPiece* TestConflictingSymbolNames_StringPiece::New() const {
  return new TestConflictingSymbolNames_StringPiece;
}

const ::google::protobuf::Descriptor* TestConflictingSymbolNames_StringPiece::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* TestConflictingSymbolNames_StringPiece::GetReflection() const {
  if (TestConflictingSymbolNames_StringPiece_reflection_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return TestConflictingSymbolNames_StringPiece_reflection_;
}

// -------------------------------------------------------------------

TestConflictingSymbolNames_DO::TestConflictingSymbolNames_DO()
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void TestConflictingSymbolNames_DO::InitAsDefaultInstance() {}

TestConflictingSymbolNames_DO::TestConflictingSymbolNames_DO(const TestConflictingSymbolNames_DO& from)
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

TestConflictingSymbolNames_DO::~TestConflictingSymbolNames_DO() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestConflictingSymbolNames_DO::descriptor() {
  if (TestConflictingSymbolNames_DO_descriptor_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return TestConflictingSymbolNames_DO_descriptor_;
}

const TestConflictingSymbolNames_DO& TestConflictingSymbolNames_DO::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_DO* TestConflictingSymbolNames_DO::default_instance_ = NULL;

TestConflictingSymbolNames_DO* TestConflictingSymbolNames_DO::New() const {
  return new TestConflictingSymbolNames_DO;
}

const ::google::protobuf::Descriptor* TestConflictingSymbolNames_DO::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* TestConflictingSymbolNames_DO::GetReflection() const {
  if (TestConflictingSymbolNames_DO_reflection_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return TestConflictingSymbolNames_DO_reflection_;
}

// -------------------------------------------------------------------



const ::std::string TestConflictingSymbolNames::_default_length_;














const ::std::string TestConflictingSymbolNames::_default_string_;









const ::std::string TestConflictingSymbolNames::_default_some_cord_;
const ::std::string TestConflictingSymbolNames::_default_some_string_piece_;



TestConflictingSymbolNames::TestConflictingSymbolNames()
  : ::google::protobuf::Message(),
    _extensions_(&TestConflictingSymbolNames_descriptor_,
                 ::google::protobuf::DescriptorPool::generated_pool(),
                 ::google::protobuf::MessageFactory::generated_factory()),
    _cached_size_(0),
    input_(0),
    output_(0),
    length_(const_cast< ::std::string*>(&_default_length_)),
    total_size_(0),
    tag_(0),
    source_(0),
    value_(0),
    file_(0),
    from_(0),
    handle_uninterpreted_(0),
    controller_(0),
    already_here_(0),
    uint32_(0u),
    uint64_(GOOGLE_ULONGLONG(0)),
    string_(const_cast< ::std::string*>(&_default_string_)),
    memset_(0),
    int32_(0),
    int64_(GOOGLE_LONGLONG(0)),
    cached_size_(0u),
    extensions_(0u),
    bit_(0u),
    bits_(0u),
    offsets_(0u),
    reflection_(0u),
    some_cord_(const_cast< ::std::string*>(&_default_some_cord_)),
    some_string_piece_(const_cast< ::std::string*>(&_default_some_string_piece_)),
    int__(0u),
    friend__(0u),
    do__(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void TestConflictingSymbolNames::InitAsDefaultInstance() {  do__ = const_cast< ::protobuf_unittest::TestConflictingSymbolNames_DO*>(&::protobuf_unittest::TestConflictingSymbolNames_DO::default_instance());
}

TestConflictingSymbolNames::TestConflictingSymbolNames(const TestConflictingSymbolNames& from)
  : ::google::protobuf::Message(),
    _extensions_(&TestConflictingSymbolNames_descriptor_,
                 ::google::protobuf::DescriptorPool::generated_pool(),
                 ::google::protobuf::MessageFactory::generated_factory()),
    _cached_size_(0),
    input_(0),
    output_(0),
    length_(const_cast< ::std::string*>(&_default_length_)),
    total_size_(0),
    tag_(0),
    source_(0),
    value_(0),
    file_(0),
    from_(0),
    handle_uninterpreted_(0),
    controller_(0),
    already_here_(0),
    uint32_(0u),
    uint64_(GOOGLE_ULONGLONG(0)),
    string_(const_cast< ::std::string*>(&_default_string_)),
    memset_(0),
    int32_(0),
    int64_(GOOGLE_LONGLONG(0)),
    cached_size_(0u),
    extensions_(0u),
    bit_(0u),
    bits_(0u),
    offsets_(0u),
    reflection_(0u),
    some_cord_(const_cast< ::std::string*>(&_default_some_cord_)),
    some_string_piece_(const_cast< ::std::string*>(&_default_some_string_piece_)),
    int__(0u),
    friend__(0u),
    do__(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

TestConflictingSymbolNames::~TestConflictingSymbolNames() {
  if (length_ != &_default_length_) {
    delete length_;
  }
  if (string_ != &_default_string_) {
    delete string_;
  }
  if (some_cord_ != &_default_some_cord_) {
    delete some_cord_;
  }
  if (some_string_piece_ != &_default_some_string_piece_) {
    delete some_string_piece_;
  }
  if (this != default_instance_) {
    delete do__;
  }
}

const ::google::protobuf::Descriptor* TestConflictingSymbolNames::descriptor() {
  if (TestConflictingSymbolNames_descriptor_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return TestConflictingSymbolNames_descriptor_;
}

const TestConflictingSymbolNames& TestConflictingSymbolNames::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames* TestConflictingSymbolNames::default_instance_ = NULL;

TestConflictingSymbolNames* TestConflictingSymbolNames::New() const {
  return new TestConflictingSymbolNames;
}

const ::google::protobuf::Descriptor* TestConflictingSymbolNames::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* TestConflictingSymbolNames::GetReflection() const {
  if (TestConflictingSymbolNames_reflection_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return TestConflictingSymbolNames_reflection_;
}

// ===================================================================

DummyMessage::DummyMessage()
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void DummyMessage::InitAsDefaultInstance() {}

DummyMessage::DummyMessage(const DummyMessage& from)
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

DummyMessage::~DummyMessage() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DummyMessage::descriptor() {
  if (DummyMessage_descriptor_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return DummyMessage_descriptor_;
}

const DummyMessage& DummyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

DummyMessage* DummyMessage::default_instance_ = NULL;

DummyMessage* DummyMessage::New() const {
  return new DummyMessage;
}

const ::google::protobuf::Descriptor* DummyMessage::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DummyMessage::GetReflection() const {
  if (DummyMessage_reflection_ == NULL) protobuf_BuildDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return DummyMessage_reflection_;
}

// ===================================================================

TestConflictingMethodNames::~TestConflictingMethodNames() {}

const ::google::protobuf::ServiceDescriptor* TestConflictingMethodNames::descriptor() {
  return TestConflictingMethodNames_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* TestConflictingMethodNames::GetDescriptor() {
  return TestConflictingMethodNames_descriptor_;
}

void TestConflictingMethodNames::Closure(::google::protobuf::RpcController* controller,
                         const ::protobuf_unittest::DummyMessage*,
                         ::protobuf_unittest::DummyMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Closure() not implemented.");
  done->Run();
}

void TestConflictingMethodNames::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), TestConflictingMethodNames_descriptor_);
  switch(method->index()) {
    case 0:
      Closure(controller,
             ::google::protobuf::down_cast<const ::protobuf_unittest::DummyMessage*>(request),
             ::google::protobuf::down_cast< ::protobuf_unittest::DummyMessage*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TestConflictingMethodNames::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), TestConflictingMethodNames_descriptor_);
  switch(method->index()) {
    case 0:
      return ::protobuf_unittest::DummyMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& TestConflictingMethodNames::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), TestConflictingMethodNames_descriptor_);
  switch(method->index()) {
    case 0:
      return ::protobuf_unittest::DummyMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

TestConflictingMethodNames_Stub::TestConflictingMethodNames_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TestConflictingMethodNames_Stub::TestConflictingMethodNames_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
TestConflictingMethodNames_Stub::~TestConflictingMethodNames_Stub() {
  if (owns_channel_) delete channel_;
}

void TestConflictingMethodNames_Stub::Closure(::google::protobuf::RpcController* controller,
                              const ::protobuf_unittest::DummyMessage* request,
                              ::protobuf_unittest::DummyMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(TestConflictingMethodNames_descriptor_->method(0),
                       controller, request, response, done);
}

}  // namespace protobuf_unittest
